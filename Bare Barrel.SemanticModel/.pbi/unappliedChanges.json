{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/semanticModel/unappliedChanges/1.0.0/schema.json",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "search_query_performance_asin_view",
      "lineageTag": "4ec28651-868f-40ee-90a2-ea6ebf1a02c1",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    brand_analytics = Source{[Schema=\"brand_analytics\"]}[Data],",
        "    search_query_performance_asin_view1 = brand_analytics{[Name=\"search_query_performance_asin_view\"]}[Data]",
        "in",
        "    search_query_performance_asin_view1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    brand_analytics = Source{[Schema=\\\"brand_analytics\\\"]}[Data],\\n    search_query_performance_asin_view1 = brand_analytics{[Name=\\\"search_query_performance_asin_view\\\"]}[Data]\\nin\\n    search_query_performance_asin_view1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "search_query_performance_brand_view",
      "lineageTag": "70d3fa63-b112-4d84-950b-acf668155561",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    brand_analytics = Source{[Schema=\"brand_analytics\"]}[Data],",
        "    search_query_performance_brand_view1 = brand_analytics{[Name=\"search_query_performance_brand_view\"]}[Data]",
        "in",
        "    search_query_performance_brand_view1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    brand_analytics = Source{[Schema=\\\"brand_analytics\\\"]}[Data],\\n    search_query_performance_brand_view1 = brand_analytics{[Name=\\\"search_query_performance_brand_view\\\"]}[Data]\\nin\\n    search_query_performance_brand_view1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "detail_page_sales_and_traffic_parent",
      "lineageTag": "99527b15-cf02-4395-a77c-7a655b11bcbf",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    business_reports = Source{[Schema=\"business_reports\"]}[Data],",
        "    detail_page_sales_and_traffic_parent1 = business_reports{[Name=\"detail_page_sales_and_traffic_parent\"]}[Data]",
        "in",
        "    detail_page_sales_and_traffic_parent1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    business_reports = Source{[Schema=\\\"business_reports\\\"]}[Data],\\n    detail_page_sales_and_traffic_parent1 = business_reports{[Name=\\\"detail_page_sales_and_traffic_parent\\\"]}[Data]\\nin\\n    detail_page_sales_and_traffic_parent1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "detail_page_sales_and_traffic_child",
      "lineageTag": "28d294fe-4d98-41bc-a463-9e69b7deec90",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    business_reports = Source{[Schema=\"business_reports\"]}[Data],",
        "    detail_page_sales_and_traffic_child1 = business_reports{[Name=\"detail_page_sales_and_traffic_child\"]}[Data]",
        "in",
        "    detail_page_sales_and_traffic_child1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    business_reports = Source{[Schema=\\\"business_reports\\\"]}[Data],\\n    detail_page_sales_and_traffic_child1 = business_reports{[Name=\\\"detail_page_sales_and_traffic_child\\\"]}[Data]\\nin\\n    detail_page_sales_and_traffic_child1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SP campaign",
      "lineageTag": "9af1bb5e-5e36-42ac-9c4a-450fe95f13c9",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_products = Source{[Schema=\"sponsored_products\"]}[Data],",
        "    campaign1 = sponsored_products{[Name=\"campaign\"]}[Data]",
        "in",
        "    campaign1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_products = Source{[Schema=\\\"sponsored_products\\\"]}[Data],\\n    campaign1 = sponsored_products{[Name=\\\"campaign\\\"]}[Data]\\nin\\n    campaign1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SP search_term",
      "lineageTag": "998abc84-c53a-4f36-81de-14df7bbc9bd4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_products = Source{[Schema=\"sponsored_products\"]}[Data],",
        "    search_term1 = sponsored_products{[Name=\"search_term\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(search_term1,{\"created_at\", \"updated_at\", \"campaign_status\"}),",
        "    #\"Lowercased Text\" = Table.TransformColumns(#\"Removed Columns\",{{\"search_term\", Text.Lower, type text}})",
        "in",
        "    #\"Lowercased Text\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_products = Source{[Schema=\\\"sponsored_products\\\"]}[Data],\\n    search_term1 = sponsored_products{[Name=\\\"search_term\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(search_term1,{\\\"created_at\\\", \\\"updated_at\\\", \\\"campaign_status\\\"}),\\n    #\\\"Lowercased Text\\\" = Table.TransformColumns(#\\\"Removed Columns\\\",{{\\\"search_term\\\", Text.Lower, type text}})\\nin\\n    #\\\"Lowercased Text\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "amazon_order_items",
      "lineageTag": "0cacaa14-d127-4a46-89d2-ae1948bf73bd",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]), \"SELECT#(lf)    t1.amazon_order_id,#(lf)    t1.order_item_id,#(lf)    t1.asin,#(lf)    t1.seller_sku,#(lf)    t1.is_gift,#(lf)    t1.is_transparency,#(lf)    t1.quantity_ordered,#(lf)    t1.quantity_shipped,#(lf)    t1.promotion_ids,#(lf)    t1.product_info_number_of_items,#(lf)    CASE -- Gets currency. If order_status = pending -> null.#(lf)    WHEN t2.purchase_date >= CURRENT_DATE - INTERVAL '7 days'#(lf)            AND (t1.item_price_currency_code IS NULL OR t1.item_price_currency_code = 'nan')#(lf)            AND t2.is_replacement_order = FALSE#(lf)        THEN t3.product_competitive_pricing_competitive_prices->0->'Price'->'ListingPrice'->>'CurrencyCode'#(lf)        ELSE t1.item_price_currency_code#(lf)    END AS \"\"item_price_currency_code\"\",#(lf)    CASE -- Gets Prime Exclusive Price if null#(lf)    WHEN t2.purchase_date >= CURRENT_DATE - INTERVAL '7 days'#(lf)            AND t1.item_price_amount IS NULL#(lf)            AND t2.is_replacement_order = FALSE#(lf)        THEN (t3.product_competitive_pricing_competitive_prices->0->'Price'->'ListingPrice'->'Amount')::FLOAT * t1.quantity_ordered#(lf)        ELSE t1.item_price_amount#(lf)    END AS \"\"item_price_amount\"\",#(lf)    t1.item_tax_currency_code,#(lf)    t1.item_tax_amount,#(lf)    t1.shipping_price_amount,#(lf)    t1.shipping_tax_amount,#(lf)    t1.shipping_discount_amount,#(lf)    t1.shipping_discount_tax_amount,#(lf)    t1.promotion_discount_amount,#(lf)    t1.promotion_discount_tax_amount,#(lf)    t1.buyer_info_gift_wrap_price_amount,#(lf)    t1.buyer_info_gift_wrap_tax_amount,#(lf)    t1.marketplace,#(lf)    CASE -- Determines if Vine order#(lf)    WHEN t2.order_status NOT IN ('Pending', 'Canceled')#(lf)            AND t1.item_price_amount IS NULL#(lf)            AND t2.is_replacement_order = FALSE#(lf)        THEN TRUE#(lf)        ELSE NULL#(lf)    END AS \"\"Vine\"\"#(lf)FROM orders.amazon_order_items t1#(lf)LEFT JOIN orders.amazon_orders t2 ON t1.amazon_order_id = t2.amazon_order_id#(lf)LEFT JOIN (#(lf)            select DISTINCT ON (asin, marketplace)#(lf)            asin, marketplace, product_competitive_pricing_competitive_prices#(lf)            from product_pricing.competitive_pricing#(lf)            where customer_type = 'Business' and product_competitive_pricing_competitive_prices != '[]'#(lf)            order by asin, marketplace, date desc#(lf)            )#(lf)            AS t3 ON t1.asin = t3.asin AND t1.marketplace = t3.marketplace#(lf)ORDER BY purchase_date ASC\", null, [EnableFolding=true]),",
        "    #\"Added Conditional Column\" = Table.AddColumn(Source, \"Coupon Fee\", each ",
        "    if [promotion_ids] <> null and Text.Contains([promotion_ids], \"Coupon\") and [marketplace] = \"US\" then 0.6",
        "    else if [promotion_ids] <> null and Text.Contains([promotion_ids], \"Coupon\") and [marketplace] = \"CA\" then 0.6",
        "    else if [promotion_ids] <> null and Text.Contains([promotion_ids], \"Coupon\") and [marketplace] = \"UK\" then 0.45",
        "    else 0),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Added Conditional Column\",{{\"Coupon Fee\", type number}}),",
        "    #\"Merged Queries [amazon_orders]\" = Table.NestedJoin(#\"Changed Type\", {\"amazon_order_id\"}, amazon_orders, {\"amazon_order_id\"}, \"amazon_orders\", JoinKind.LeftOuter),",
        "    #\"Expanded amazon_orders\" = Table.ExpandTableColumn(#\"Merged Queries [amazon_orders]\", \"amazon_orders\", {\"purchase_date\", \"purchase_date_local_tz\"}, {\"purchase_date\", \"purchase_date_local_tz\"}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Expanded amazon_orders\", {\"asin\", \"marketplace\"}, #\"COGS (WW)\", {\"ASIN\", \"Marketplace\"}, \"COGS (WW)\", JoinKind.LeftOuter),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Merged Queries\", \"COGS per Order Item\", each let currentdate = [purchase_date_local_tz] in",
        "Table.SelectRows([#\"COGS (WW)\"], each [Date Start] <= ",
        "currentdate and [Date End] >= currentdate)),",
        "    #\"Expanded COGS per Order Item\" = Table.ExpandTableColumn(#\"Added Custom\", \"COGS per Order Item\", {\"COGS\"}, {\"COGS\"}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded COGS per Order Item\",{\"COGS (WW)\"}),",
        "    #\"Added Custom1\" = Table.AddColumn(#\"Removed Columns\", \"Total COGS\", each [COGS] * [quantity_ordered]),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added Custom1\",{{\"COGS\", Currency.Type}, {\"Total COGS\", Currency.Type}})",
        "in",
        "    #\"Changed Type1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]), \\\"SELECT#(lf)    t1.amazon_order_id,#(lf)    t1.order_item_id,#(lf)    t1.asin,#(lf)    t1.seller_sku,#(lf)    t1.is_gift,#(lf)    t1.is_transparency,#(lf)    t1.quantity_ordered,#(lf)    t1.quantity_shipped,#(lf)    t1.promotion_ids,#(lf)    t1.product_info_number_of_items,#(lf)    CASE -- Gets currency. If order_status = pending -> null.#(lf)    WHEN t2.purchase_date >= CURRENT_DATE - INTERVAL '7 days'#(lf)            AND (t1.item_price_currency_code IS NULL OR t1.item_price_currency_code = 'nan')#(lf)            AND t2.is_replacement_order = FALSE#(lf)        THEN t3.product_competitive_pricing_competitive_prices->0->'Price'->'ListingPrice'->>'CurrencyCode'#(lf)        ELSE t1.item_price_currency_code#(lf)    END AS \\\"\\\"item_price_currency_code\\\"\\\",#(lf)    CASE -- Gets Prime Exclusive Price if null#(lf)    WHEN t2.purchase_date >= CURRENT_DATE - INTERVAL '7 days'#(lf)            AND t1.item_price_amount IS NULL#(lf)            AND t2.is_replacement_order = FALSE#(lf)        THEN (t3.product_competitive_pricing_competitive_prices->0->'Price'->'ListingPrice'->'Amount')::FLOAT * t1.quantity_ordered#(lf)        ELSE t1.item_price_amount#(lf)    END AS \\\"\\\"item_price_amount\\\"\\\",#(lf)    t1.item_tax_currency_code,#(lf)    t1.item_tax_amount,#(lf)    t1.shipping_price_amount,#(lf)    t1.shipping_tax_amount,#(lf)    t1.shipping_discount_amount,#(lf)    t1.shipping_discount_tax_amount,#(lf)    t1.promotion_discount_amount,#(lf)    t1.promotion_discount_tax_amount,#(lf)    t1.buyer_info_gift_wrap_price_amount,#(lf)    t1.buyer_info_gift_wrap_tax_amount,#(lf)    t1.marketplace,#(lf)    CASE -- Determines if Vine order#(lf)    WHEN t2.order_status NOT IN ('Pending', 'Canceled')#(lf)            AND t1.item_price_amount IS NULL#(lf)            AND t2.is_replacement_order = FALSE#(lf)        THEN TRUE#(lf)        ELSE NULL#(lf)    END AS \\\"\\\"Vine\\\"\\\"#(lf)FROM orders.amazon_order_items t1#(lf)LEFT JOIN orders.amazon_orders t2 ON t1.amazon_order_id = t2.amazon_order_id#(lf)LEFT JOIN (#(lf)            select DISTINCT ON (asin, marketplace)#(lf)            asin, marketplace, product_competitive_pricing_competitive_prices#(lf)            from product_pricing.competitive_pricing#(lf)            where customer_type = 'Business' and product_competitive_pricing_competitive_prices != '[]'#(lf)            order by asin, marketplace, date desc#(lf)            )#(lf)            AS t3 ON t1.asin = t3.asin AND t1.marketplace = t3.marketplace#(lf)ORDER BY purchase_date ASC\\\", null, [EnableFolding=true]),\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(Source, \\\"Coupon Fee\\\", each \\n    if [promotion_ids] <> null and Text.Contains([promotion_ids], \\\"Coupon\\\") and [marketplace] = \\\"US\\\" then 0.6\\n    else if [promotion_ids] <> null and Text.Contains([promotion_ids], \\\"Coupon\\\") and [marketplace] = \\\"CA\\\" then 0.6\\n    else if [promotion_ids] <> null and Text.Contains([promotion_ids], \\\"Coupon\\\") and [marketplace] = \\\"UK\\\" then 0.45\\n    else 0),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Added Conditional Column\\\",{{\\\"Coupon Fee\\\", type number}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "amazon_orders",
      "lineageTag": "431daf47-1944-49f3-829c-0290eab39702",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]), \"SELECT *,#(lf)       CASE#(lf)           WHEN marketplace IN ('US', 'CA', 'MX') THEN purchase_date AT TIME ZONE 'America/Los_Angeles'#(lf)           WHEN marketplace IN ('UK') THEN purchase_date AT TIME ZONE 'Europe/London'#(lf)           ELSE NULL#(lf)       END AS purchase_date_local_tz#(lf)FROM orders.amazon_orders\", null, [EnableFolding=true]),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(Source,{\"amazon_order_id\", \"earliest_ship_date\", \"sales_channel\", \"order_status\", \"number_of_items_shipped\", \"order_type\", \"is_premium_order\", \"is_prime\", \"fulfillment_channel\", \"number_of_items_unshipped\", \"has_regulated_items\", \"is_replacement_order\", \"is_sold_by_ab\", \"latest_ship_date\", \"ship_service_level\", \"is_ispu\", \"marketplace_id\", \"is_access_point_order\", \"seller_order_id\", \"payment_method\", \"is_business_order\", \"is_global_express_enabled\", \"last_update_date\", \"shipment_service_level_category\", \"shipping_address_state_or_region\", \"shipping_address_postal_code\", \"shipping_address_city\", \"shipping_address_country_code\", \"payment_method_details\", \"buyer_info_buyer_email\", \"order_total_currency_code\", \"order_total_amount\", \"replaced_order_id\", \"created_at\", \"updated_at\", \"marketplace\", \"purchase_date\", \"purchase_date_local_tz\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Reordered Columns\",{{\"purchase_date_local_tz\", type date}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]), \\\"SELECT *,#(lf)       CASE#(lf)           WHEN marketplace IN ('US', 'CA', 'MX') THEN purchase_date AT TIME ZONE 'America/Los_Angeles'#(lf)           WHEN marketplace IN ('UK') THEN purchase_date AT TIME ZONE 'Europe/London'#(lf)           ELSE NULL#(lf)       END AS purchase_date_local_tz#(lf)FROM orders.amazon_orders\\\", null, [EnableFolding=true]),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(Source,{\\\"amazon_order_id\\\", \\\"earliest_ship_date\\\", \\\"sales_channel\\\", \\\"order_status\\\", \\\"number_of_items_shipped\\\", \\\"order_type\\\", \\\"is_premium_order\\\", \\\"is_prime\\\", \\\"fulfillment_channel\\\", \\\"number_of_items_unshipped\\\", \\\"has_regulated_items\\\", \\\"is_replacement_order\\\", \\\"is_sold_by_ab\\\", \\\"latest_ship_date\\\", \\\"ship_service_level\\\", \\\"is_ispu\\\", \\\"marketplace_id\\\", \\\"is_access_point_order\\\", \\\"seller_order_id\\\", \\\"payment_method\\\", \\\"is_business_order\\\", \\\"is_global_express_enabled\\\", \\\"last_update_date\\\", \\\"shipment_service_level_category\\\", \\\"shipping_address_state_or_region\\\", \\\"shipping_address_postal_code\\\", \\\"shipping_address_city\\\", \\\"shipping_address_country_code\\\", \\\"payment_method_details\\\", \\\"buyer_info_buyer_email\\\", \\\"order_total_currency_code\\\", \\\"order_total_amount\\\", \\\"replaced_order_id\\\", \\\"created_at\\\", \\\"updated_at\\\", \\\"marketplace\\\", \\\"purchase_date\\\", \\\"purchase_date_local_tz\\\"}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Reordered Columns\\\",{{\\\"purchase_date_local_tz\\\", type date}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim Marketplace",
      "lineageTag": "0502c810-5c63-4dff-8523-af2742970071",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WcnZU0lFyNHINDTQMD3F3DnFyNwIJ5CZW5efpJScqxepEK4V6g4QM3SyM3S2cjRyD/M0DkNTk65VmQ5QFg0RDwgJcvD29IwxcXIOQVeUqxcYCAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t, Column2 = _t, Column3 = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Column1\", \"marketplace\"}, {\"Column2\", \"marketplace_id\"}, {\"Column3\", \"sales_channel\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45WcnZU0lFyNHINDTQMD3F3DnFyNwIJ5CZW5efpJScqxepEK4V6g4QM3SyM3S2cjRyD/M0DkNTk65VmQ5QFg0RDwgJcvD29IwxcXIOQVeUqxcYCAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t, Column2 = _t, Column3 = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Column1\\\", type text}, {\\\"Column2\\\", type text}, {\\\"Column3\\\", type text}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"Column1\\\", \\\"marketplace\\\"}, {\\\"Column2\\\", \\\"marketplace_id\\\"}, {\\\"Column3\\\", \\\"sales_channel\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "summaries",
      "lineageTag": "d624be71-3aee-4c93-b77b-34756f7195f4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    listings_items = Source{[Schema=\"listings_items\"]}[Data],",
        "    summaries1 = listings_items{[Name=\"summaries\"]}[Data]",
        "in",
        "    summaries1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    listings_items = Source{[Schema=\\\"listings_items\\\"]}[Data],\\n    summaries1 = listings_items{[Name=\\\"summaries\\\"]}[Data]\\nin\\n    summaries1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim Product Codes",
      "lineageTag": "832e376b-a445-4b36-a1d4-9f1295586bc1",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.Combine({#\"Dim BB Product Codes\", #\"Dim RY Product Codes\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(Source,{{\"parent_shaker_code\", \"portfolio_code\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.Combine({#\\\"Dim BB Product Codes\\\", #\\\"Dim RY Product Codes\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(Source,{{\\\"parent_shaker_code\\\", \\\"portfolio_code\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim BB Product Codes",
      "lineageTag": "3a43642f-025f-4a5a-8555-6cf9d6255ea4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]), \"SELECT DISTINCT sku,#(lf)                asin,#(lf)                product_type,#(lf)                tenant_id#(lf)FROM listings_items.summaries#(lf)WHERE tenant_id = 1#(lf)    AND date = (SELECT MAX(date) FROM listings_items.summaries#(lf)                    WHERE tenant_id = 1)\", null, [EnableFolding=true]),",
        "    #\"Removed Duplicates\" = Table.Distinct(Source, {\"asin\"}),",
        "    #\"Inserted Text Between Delimiters\" = Table.AddColumn(#\"Removed Duplicates\", \"Text Between Delimiters\", each Text.BetweenDelimiters([sku], \"_\", \"-\"), type text),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Inserted Text Between Delimiters\",{{\"Text Between Delimiters\", \"parent_code\"}}),",
        "    #\"Inserted Text Between Delimiters1\" = Table.AddColumn(#\"Renamed Columns\", \"Text Between Delimiters\", each Text.BetweenDelimiters([sku], \"-\", \"-\"), type text),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Text Between Delimiters1\",{{\"Text Between Delimiters\", \"shaker_code\"}}),",
        "    #\"Inserted Merged Column\" = Table.AddColumn(#\"Renamed Columns1\", \"parent_shaker_code\", each Text.Combine({[parent_code], \"-\", [shaker_code]}), type text),",
        "    #\"Inserted Text After Delimiter\" = Table.AddColumn(#\"Inserted Merged Column\", \"Text After Delimiter\", each Text.AfterDelimiter([sku], \"SL_\"), type text),",
        "    #\"Renamed Columns2\" = Table.RenameColumns(#\"Inserted Text After Delimiter\",{{\"Text After Delimiter\", \"long_product_code\"}}),",
        "    #\"Inserted First Characters\" = Table.AddColumn(#\"Renamed Columns2\", \"First Characters\", each Text.Start([long_product_code], 3), type text),",
        "    #\"Renamed Columns3\" = Table.RenameColumns(#\"Inserted First Characters\",{{\"First Characters\", \"product_code\"}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Renamed Columns3\",{\"long_product_code\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each ([shaker_code] <> \"\"))",
        "in",
        "    #\"Filtered Rows\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim RY Product Codes",
      "lineageTag": "c7d60877-b479-4c7d-a56e-648af6b3ac1b",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]), \"SELECT DISTINCT sku,#(lf)                asin,#(lf)                product_type,#(lf)                tenant_id#(lf)FROM listings_items.summaries#(lf)WHERE tenant_id = 2#(lf)    AND date = (SELECT MAX(date) FROM listings_items.summaries#(lf)                    WHERE tenant_id = 2)\", null, [EnableFolding=true]),",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each Text.StartsWith([sku], \"R_\")),",
        "    #\"Inserted Text Before Delimiter\" = Table.AddColumn(#\"Filtered Rows\", \"Text Before Delimiter\", each Text.BeforeDelimiter([sku], \"_\", 1), type text),",
        "    #\"Inserted Text Before Delimiter1\" = Table.AddColumn(#\"Inserted Text Before Delimiter\", \"parent_code\", each Text.BeforeDelimiter([Text Before Delimiter], \"-\", 1), type text),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Inserted Text Before Delimiter1\",{\"Text Before Delimiter\"}),",
        "    #\"Inserted Text Between Delimiters\" = Table.AddColumn(#\"Removed Columns\", \"shaker_code\", each Text.BetweenDelimiters([sku], \"_\", \"_\", 1, 1), type text),",
        "    #\"Duplicated Column\" = Table.AddColumn(#\"Inserted Text Between Delimiters\", \"parent_shaker_code\", each [parent_code], type text),",
        "    #\"Inserted Text After Delimiter\" = Table.AddColumn(#\"Duplicated Column\", \"product_code\", each Text.AfterDelimiter([sku], \"_\", {0, RelativePosition.FromEnd}), type text),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Inserted Text After Delimiter\", {\"asin\"})",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]), \\\"SELECT DISTINCT sku,#(lf)                asin,#(lf)                product_type,#(lf)                tenant_id#(lf)FROM listings_items.summaries#(lf)WHERE tenant_id = 2#(lf)    AND date = (SELECT MAX(date) FROM listings_items.summaries#(lf)                    WHERE tenant_id = 2)\\\", null, [EnableFolding=true]),\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(Source, each Text.StartsWith([sku], \\\"R_\\\")),\\n    #\\\"Inserted Text Before Delimiter\\\" = Table.AddColumn(#\\\"Filtered Rows\\\", \\\"Text Before Delimiter\\\", each Text.BeforeDelimiter([sku], \\\"_\\\", 1), type text),\\n    #\\\"Inserted Text Before Delimiter1\\\" = Table.AddColumn(#\\\"Inserted Text Before Delimiter\\\", \\\"parent_code\\\", each Text.BeforeDelimiter([Text Before Delimiter], \\\"-\\\", 1), type text),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Inserted Text Before Delimiter1\\\",{\\\"Text Before Delimiter\\\"}),\\n    #\\\"Inserted Text Between Delimiters\\\" = Table.AddColumn(#\\\"Removed Columns\\\", \\\"shaker_code\\\", each Text.BetweenDelimiters([sku], \\\"_\\\", \\\"_\\\", 1, 1), type text),\\n    #\\\"Duplicated Column\\\" = Table.AddColumn(#\\\"Inserted Text Between Delimiters\\\", \\\"parent_shaker_code\\\", each [parent_code], type text),\\n    #\\\"Inserted Text After Delimiter\\\" = Table.AddColumn(#\\\"Duplicated Column\\\", \\\"product_code\\\", each Text.AfterDelimiter([sku], \\\"_\\\", {0, RelativePosition.FromEnd}), type text),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Inserted Text After Delimiter\\\", {\\\"asin\\\"})\\nin\\n    #\\\"Removed Duplicates\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim Parent Portfolio Code",
      "lineageTag": "78e943f5-a7a7-43bb-ac77-25cad134b54c",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.Combine({#\"Dim BB Product Codes\", #\"Dim RY Product Codes\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(Source,{{\"parent_shaker_code\", \"portfolio_code\"}}),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Renamed Columns\",{\"tenant_id\", \"product_type\", \"parent_code\", \"portfolio_code\"}),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Removed Other Columns\",{\"portfolio_code\", \"parent_code\", \"product_type\", \"tenant_id\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Reordered Columns\", {\"portfolio_code\"})",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.Combine({#\\\"Dim BB Product Codes\\\", #\\\"Dim RY Product Codes\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(Source,{{\\\"parent_shaker_code\\\", \\\"portfolio_code\\\"}}),\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(#\\\"Renamed Columns\\\",{\\\"tenant_id\\\", \\\"product_type\\\", \\\"parent_code\\\", \\\"portfolio_code\\\"}),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(#\\\"Removed Other Columns\\\",{\\\"portfolio_code\\\", \\\"parent_code\\\", \\\"product_type\\\", \\\"tenant_id\\\"}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Reordered Columns\\\", {\\\"portfolio_code\\\"})\\nin\\n    #\\\"Removed Duplicates\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim Sku Market Category",
      "lineageTag": "1355e71c-7e23-4d67-80fe-cbc1c6892279",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    listings_items = Source{[Schema=\"listings_items\"]}[Data],",
        "    summaries1 = listings_items{[Name=\"summaries\"]}[Data],",
        "    #\"Filtered Rows\" = Table.SelectRows(summaries1, each true),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Filtered Rows\",{{\"date\", Order.Descending}, {\"sku\", Order.Ascending}}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Sorted Rows\", {\"sku\", \"asin\", \"marketplace_id\"})",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    listings_items = Source{[Schema=\\\"listings_items\\\"]}[Data],\\n    summaries1 = listings_items{[Name=\\\"summaries\\\"]}[Data],\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(summaries1, each true),\\n    #\\\"Sorted Rows\\\" = Table.Sort(#\\\"Filtered Rows\\\",{{\\\"date\\\", Order.Descending}, {\\\"sku\\\", Order.Ascending}}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Sorted Rows\\\", {\\\"sku\\\", \\\"asin\\\", \\\"marketplace_id\\\"})\\nin\\n    #\\\"Removed Duplicates\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DimPrimePrice",
      "lineageTag": "59b9c5cc-b0ba-40c5-8a77-44fb591a13be",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    product_pricing = Source{[Schema=\"product_pricing\"]}[Data],",
        "    competitive_pricing1 = product_pricing{[Name=\"competitive_pricing\"]}[Data],",
        "    #\"Sorted Rows\" = Table.Sort(competitive_pricing1,{{\"date\", Order.Descending}, {\"asin\", Order.Ascending}, {\"marketplace\", Order.Ascending}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Sorted Rows\", each ([customer_type] = \"Business\") and ([product_competitive_pricing_competitive_prices] <> \"[]\") and ([product_competitive_pricing_competitive_prices] <> null)),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Filtered Rows\", {\"asin\", \"product_identifiers_marketplace_asin_marketplace_id\"}),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Removed Duplicates\",{\"asin\", \"product_competitive_pricing_competitive_prices\", \"product_identifiers_marketplace_asin_marketplace_id\"}),",
        "    #\"Parsed JSON\" = Table.TransformColumns(#\"Removed Other Columns\",{{\"product_competitive_pricing_competitive_prices\", Json.Document}}),",
        "    #\"Expanded product_competitive_pricing_competitive_prices\" = Table.ExpandListColumn(#\"Parsed JSON\", \"product_competitive_pricing_competitive_prices\"),",
        "    #\"Expanded product_competitive_pricing_competitive_prices1\" = Table.ExpandRecordColumn(#\"Expanded product_competitive_pricing_competitive_prices\", \"product_competitive_pricing_competitive_prices\", {\"Price\"}, {\"product_competitive_pricing_competitive_prices.Price\"}),",
        "    #\"Expanded product_competitive_pricing_competitive_prices.Price\" = Table.ExpandRecordColumn(#\"Expanded product_competitive_pricing_competitive_prices1\", \"product_competitive_pricing_competitive_prices.Price\", {\"ListingPrice\"}, {\"product_competitive_pricing_competitive_prices.Price.ListingPrice\"}),",
        "    #\"Expanded product_competitive_pricing_competitive_prices.Price.ListingPrice\" = Table.ExpandRecordColumn(#\"Expanded product_competitive_pricing_competitive_prices.Price\", \"product_competitive_pricing_competitive_prices.Price.ListingPrice\", {\"Amount\"}, {\"product_competitive_pricing_competitive_prices.Price.ListingPrice.Amount\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded product_competitive_pricing_competitive_prices.Price.ListingPrice\",{{\"product_competitive_pricing_competitive_prices.Price.ListingPrice.Amount\", \"prime_price\"}, {\"product_identifiers_marketplace_asin_marketplace_id\", \"marketplace_id\"}}),",
        "    #\"Added Index1\" = Table.AddIndexColumn(#\"Renamed Columns\", \"Index.1\", 1, 1, Int64.Type),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Added Index1\",{{\"Index.1\", \"PrimePriceSK\"}}),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"PrimePriceSK\", \"asin\", \"marketplace_id\", \"prime_price\"})",
        "in",
        "    #\"Reordered Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    product_pricing = Source{[Schema=\\\"product_pricing\\\"]}[Data],\\n    competitive_pricing1 = product_pricing{[Name=\\\"competitive_pricing\\\"]}[Data],\\n    #\\\"Sorted Rows\\\" = Table.Sort(competitive_pricing1,{{\\\"date\\\", Order.Descending}, {\\\"asin\\\", Order.Ascending}, {\\\"marketplace\\\", Order.Ascending}}),\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Sorted Rows\\\", each ([customer_type] = \\\"Business\\\") and ([product_competitive_pricing_competitive_prices] <> \\\"[]\\\") and ([product_competitive_pricing_competitive_prices] <> null)),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Filtered Rows\\\", {\\\"asin\\\", \\\"product_identifiers_marketplace_asin_marketplace_id\\\"}),\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(#\\\"Removed Duplicates\\\",{\\\"asin\\\", \\\"product_competitive_pricing_competitive_prices\\\", \\\"product_identifiers_marketplace_asin_marketplace_id\\\"}),\\n    #\\\"Parsed JSON\\\" = Table.TransformColumns(#\\\"Removed Other Columns\\\",{{\\\"product_competitive_pricing_competitive_prices\\\", Json.Document}}),\\n    #\\\"Expanded product_competitive_pricing_competitive_prices\\\" = Table.ExpandListColumn(#\\\"Parsed JSON\\\", \\\"product_competitive_pricing_competitive_prices\\\"),\\n    #\\\"Expanded product_competitive_pricing_competitive_prices1\\\" = Table.ExpandRecordColumn(#\\\"Expanded product_competitive_pricing_competitive_prices\\\", \\\"product_competitive_pricing_competitive_prices\\\", {\\\"Price\\\"}, {\\\"product_competitive_pricing_competitive_prices.Price\\\"}),\\n    #\\\"Expanded product_competitive_pricing_competitive_prices.Price\\\" = Table.ExpandRecordColumn(#\\\"Expanded product_competitive_pricing_competitive_prices1\\\", \\\"product_competitive_pricing_competitive_prices.Price\\\", {\\\"ListingPrice\\\"}, {\\\"product_competitive_pricing_competitive_prices.Price.ListingPrice\\\"}),\\n    #\\\"Expanded product_competitive_pricing_competitive_prices.Price.ListingPrice\\\" = Table.ExpandRecordColumn(#\\\"Expanded product_competitive_pricing_competitive_prices.Price\\\", \\\"product_competitive_pricing_competitive_prices.Price.ListingPrice\\\", {\\\"Amount\\\"}, {\\\"product_competitive_pricing_competitive_prices.Price.ListingPrice.Amount\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Expanded product_competitive_pricing_competitive_prices.Price.ListingPrice\\\",{{\\\"product_competitive_pricing_competitive_prices.Price.ListingPrice.Amount\\\", \\\"prime_price\\\"}, {\\\"product_identifiers_marketplace_asin_marketplace_id\\\", \\\"marketplace_id\\\"}}),\\n    #\\\"Added Index1\\\" = Table.AddIndexColumn(#\\\"Renamed Columns\\\", \\\"Index.1\\\", 1, 1, Int64.Type),\\n    #\\\"Renamed Columns1\\\" = Table.RenameColumns(#\\\"Added Index1\\\",{{\\\"Index.1\\\", \\\"PrimePriceSK\\\"}}),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(#\\\"Renamed Columns1\\\",{\\\"PrimePriceSK\\\", \\\"asin\\\", \\\"marketplace_id\\\", \\\"prime_price\\\"})\\nin\\n    #\\\"Reordered Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "h10_keyword_tracker",
      "lineageTag": "cc1f61f6-ddec-4a51-a21b-3848c47173df",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]), \"SELECT *,#(lf)       CASE#(lf)           WHEN marketplace_id IN ('US', 'CA', 'MX') THEN date_added AT TIME ZONE 'America/Los_Angeles'#(lf)           WHEN marketplace_id IN ('UK') THEN date_added AT TIME ZONE 'Europe/London'#(lf)           ELSE NULL#(lf)       END AS date_added_local_tz#(lf)FROM rankings.h10_keyword_tracker\", null, [EnableFolding=true]),",
        "    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"title\", \"marketplace\", \"created_at\", \"updated_at\"}),",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Removed Columns\",306,null,Replacer.ReplaceValue,{\"organic_rank\"}),",
        "    #\"Inserted Date\" = Table.AddColumn(#\"Replaced Value\", \"Date\", each Date.From([date_added_local_tz]), type date)",
        "in",
        "    #\"Inserted Date\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]), \\\"SELECT *,#(lf)       CASE#(lf)           WHEN marketplace_id IN ('US', 'CA', 'MX') THEN date_added AT TIME ZONE 'America/Los_Angeles'#(lf)           WHEN marketplace_id IN ('UK') THEN date_added AT TIME ZONE 'Europe/London'#(lf)           ELSE NULL#(lf)       END AS date_added_local_tz#(lf)FROM rankings.h10_keyword_tracker\\\", null, [EnableFolding=true]),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(Source,{\\\"title\\\", \\\"marketplace\\\", \\\"created_at\\\", \\\"updated_at\\\"}),\\n    #\\\"Replaced Value\\\" = Table.ReplaceValue(#\\\"Removed Columns\\\",306,null,Replacer.ReplaceValue,{\\\"organic_rank\\\"}),\\n    #\\\"Inserted Date\\\" = Table.AddColumn(#\\\"Replaced Value\\\", \\\"Date\\\", each Date.From([date_added_local_tz]), type date)\\nin\\n    #\\\"Inserted Date\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "DimFBAInventory",
      "lineageTag": "508dae5e-86b7-4dbe-899f-c52b2180afc9",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    inventory = Source{[Schema=\"inventory\"]}[Data],",
        "    fba1 = inventory{[Name=\"fba\"]}[Data],",
        "    #\"Filtered Rows\" = Table.SelectRows(fba1, each ([last_updated_time] <> null)),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Filtered Rows\",{{\"date\", Order.Descending}, {\"asin\", Order.Ascending}, {\"marketplace\", Order.Ascending}}),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Sorted Rows\",{\"asin\", \"total_quantity\", \"fulfillable_quantity\", \"inbound_working_quantity\", \"inbound_shipped_quantity\", \"inbound_receiving_quantity\", \"reserved_quantity_total_reserved_quantity\", \"reserved_quantity_pending_customer_order_quantity\", \"reserved_quantity_pending_transshipment_quantity\", \"reserved_quantity_fc_processing_quantity\", \"researching_quantity_total_researching_quantity\", \"researching_quantity_researching_quantity_breakdown\", \"unfulfillable_quantity_total_unfulfillable_quantity\", \"unfulfillable_quantity_customer_damaged_quantity\", \"unfulfillable_quantity_warehouse_damaged_quantity\", \"unfulfillable_quantity_distributor_damaged_quantity\", \"unfulfillable_quantity_carrier_damaged_quantity\", \"unfulfillable_quantity_defective_quantity\", \"unfulfillable_quantity_expired_quantity\", \"future_supply_quantity_reserved_future_supply_quantity\", \"future_supply_quantity_future_supply_buyable_quantity\", \"marketplace\"}),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Removed Other Columns\",{\"asin\", \"marketplace\", \"total_quantity\", \"fulfillable_quantity\", \"inbound_working_quantity\", \"inbound_shipped_quantity\", \"inbound_receiving_quantity\", \"reserved_quantity_total_reserved_quantity\", \"reserved_quantity_pending_customer_order_quantity\", \"reserved_quantity_pending_transshipment_quantity\", \"reserved_quantity_fc_processing_quantity\", \"researching_quantity_total_researching_quantity\", \"researching_quantity_researching_quantity_breakdown\", \"unfulfillable_quantity_total_unfulfillable_quantity\", \"unfulfillable_quantity_customer_damaged_quantity\", \"unfulfillable_quantity_warehouse_damaged_quantity\", \"unfulfillable_quantity_distributor_damaged_quantity\", \"unfulfillable_quantity_carrier_damaged_quantity\", \"unfulfillable_quantity_defective_quantity\", \"unfulfillable_quantity_expired_quantity\", \"future_supply_quantity_reserved_future_supply_quantity\", \"future_supply_quantity_future_supply_buyable_quantity\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Reordered Columns\", {\"asin\", \"marketplace\"})",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    inventory = Source{[Schema=\\\"inventory\\\"]}[Data],\\n    fba1 = inventory{[Name=\\\"fba\\\"]}[Data],\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(fba1, each ([last_updated_time] <> null)),\\n    #\\\"Sorted Rows\\\" = Table.Sort(#\\\"Filtered Rows\\\",{{\\\"date\\\", Order.Descending}, {\\\"asin\\\", Order.Ascending}, {\\\"marketplace\\\", Order.Ascending}}),\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(#\\\"Sorted Rows\\\",{\\\"asin\\\", \\\"total_quantity\\\", \\\"fulfillable_quantity\\\", \\\"inbound_working_quantity\\\", \\\"inbound_shipped_quantity\\\", \\\"inbound_receiving_quantity\\\", \\\"reserved_quantity_total_reserved_quantity\\\", \\\"reserved_quantity_pending_customer_order_quantity\\\", \\\"reserved_quantity_pending_transshipment_quantity\\\", \\\"reserved_quantity_fc_processing_quantity\\\", \\\"researching_quantity_total_researching_quantity\\\", \\\"researching_quantity_researching_quantity_breakdown\\\", \\\"unfulfillable_quantity_total_unfulfillable_quantity\\\", \\\"unfulfillable_quantity_customer_damaged_quantity\\\", \\\"unfulfillable_quantity_warehouse_damaged_quantity\\\", \\\"unfulfillable_quantity_distributor_damaged_quantity\\\", \\\"unfulfillable_quantity_carrier_damaged_quantity\\\", \\\"unfulfillable_quantity_defective_quantity\\\", \\\"unfulfillable_quantity_expired_quantity\\\", \\\"future_supply_quantity_reserved_future_supply_quantity\\\", \\\"future_supply_quantity_future_supply_buyable_quantity\\\", \\\"marketplace\\\"}),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(#\\\"Removed Other Columns\\\",{\\\"asin\\\", \\\"marketplace\\\", \\\"total_quantity\\\", \\\"fulfillable_quantity\\\", \\\"inbound_working_quantity\\\", \\\"inbound_shipped_quantity\\\", \\\"inbound_receiving_quantity\\\", \\\"reserved_quantity_total_reserved_quantity\\\", \\\"reserved_quantity_pending_customer_order_quantity\\\", \\\"reserved_quantity_pending_transshipment_quantity\\\", \\\"reserved_quantity_fc_processing_quantity\\\", \\\"researching_quantity_total_researching_quantity\\\", \\\"researching_quantity_researching_quantity_breakdown\\\", \\\"unfulfillable_quantity_total_unfulfillable_quantity\\\", \\\"unfulfillable_quantity_customer_damaged_quantity\\\", \\\"unfulfillable_quantity_warehouse_damaged_quantity\\\", \\\"unfulfillable_quantity_distributor_damaged_quantity\\\", \\\"unfulfillable_quantity_carrier_damaged_quantity\\\", \\\"unfulfillable_quantity_defective_quantity\\\", \\\"unfulfillable_quantity_expired_quantity\\\", \\\"future_supply_quantity_reserved_future_supply_quantity\\\", \\\"future_supply_quantity_future_supply_buyable_quantity\\\"}),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Reordered Columns\\\", {\\\"asin\\\", \\\"marketplace\\\"})\\nin\\n    #\\\"Removed Duplicates\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DimFBAPlanningInventory",
      "lineageTag": "ef9eb182-bde6-4197-a787-a89b83f77657",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    inventory = Source{[Schema=\"inventory\"]}[Data],",
        "    fba_planning_inventory1 = inventory{[Name=\"fba_planning_inventory\"]}[Data],",
        "    #\"Sorted Rows\" = Table.Sort(fba_planning_inventory1,{{\"snapshot_date\", Order.Descending}, {\"asin\", Order.Ascending}, {\"marketplace\", Order.Ascending}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Sorted Rows\", each ([condition] = \"New\")),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Filtered Rows\", {\"marketplace\", \"asin\"}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Removed Duplicates\",{\"snapshot_date\", \"sku\", \"fnsku\", \"product_name\", \"condition\", \"currency\", \"storage_type\", \"product_group\", \"created_at\", \"updated_at\", \"volume_unit_measurement\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    inventory = Source{[Schema=\\\"inventory\\\"]}[Data],\\n    fba_planning_inventory1 = inventory{[Name=\\\"fba_planning_inventory\\\"]}[Data],\\n    #\\\"Sorted Rows\\\" = Table.Sort(fba_planning_inventory1,{{\\\"snapshot_date\\\", Order.Descending}, {\\\"asin\\\", Order.Ascending}, {\\\"marketplace\\\", Order.Ascending}}),\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Sorted Rows\\\", each ([condition] = \\\"New\\\")),\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Filtered Rows\\\", {\\\"marketplace\\\", \\\"asin\\\"}),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Removed Duplicates\\\",{\\\"snapshot_date\\\", \\\"sku\\\", \\\"fnsku\\\", \\\"product_name\\\", \\\"condition\\\", \\\"currency\\\", \\\"storage_type\\\", \\\"product_group\\\", \\\"created_at\\\", \\\"updated_at\\\", \\\"volume_unit_measurement\\\"})\\nin\\n    #\\\"Removed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SP advertised_product",
      "lineageTag": "d6d38265-fca4-4aaa-b0e8-5a1aba466f26",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_products = Source{[Schema=\"sponsored_products\"]}[Data],",
        "    advertised_product1 = sponsored_products{[Name=\"advertised_product\"]}[Data]",
        "in",
        "    advertised_product1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_products = Source{[Schema=\\\"sponsored_products\\\"]}[Data],\\n    advertised_product1 = sponsored_products{[Name=\\\"advertised_product\\\"]}[Data]\\nin\\n    advertised_product1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SP campaign_adgroup",
      "lineageTag": "779cef7b-f72f-4bb1-a6bb-c87127b589fb",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_products = Source{[Schema=\"sponsored_products\"]}[Data],",
        "    campaign_adgroup1 = sponsored_products{[Name=\"campaign_adgroup\"]}[Data]",
        "in",
        "    campaign_adgroup1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_products = Source{[Schema=\\\"sponsored_products\\\"]}[Data],\\n    campaign_adgroup1 = sponsored_products{[Name=\\\"campaign_adgroup\\\"]}[Data]\\nin\\n    campaign_adgroup1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SP campaign_placement",
      "lineageTag": "11e90cc5-32e2-4329-813d-327f7fa83549",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]), \"SELECT t1.*,#(lf)       t2.advertised_asin #(lf)FROM sponsored_products.campaign_placement t1#(lf)LEFT JOIN (SELECT DISTINCT ON (date, campaign_id, advertised_asin)#(lf)           date, campaign_id, advertised_asin#(lf)           FROM sponsored_products.advertised_product) t2#(lf)    ON t1.campaign_id = t2.campaign_id AND t1.date = t2.date#(lf)ORDER BY date DESC, campaign_name\", null, [EnableFolding=true])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]), \\\"SELECT t1.*,#(lf)       t2.advertised_asin #(lf)FROM sponsored_products.campaign_placement t1#(lf)LEFT JOIN (SELECT DISTINCT ON (date, campaign_id, advertised_asin)#(lf)           date, campaign_id, advertised_asin#(lf)           FROM sponsored_products.advertised_product) t2#(lf)    ON t1.campaign_id = t2.campaign_id AND t1.date = t2.date#(lf)ORDER BY date DESC, campaign_name\\\", null, [EnableFolding=true])\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim SP campaigns",
      "lineageTag": "0a422856-9140-45d5-b4bc-a0d72136cd9d",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_products = Source{[Schema=\"sponsored_products\"]}[Data],",
        "    campaigns1 = sponsored_products{[Name=\"campaigns\"]}[Data]",
        "in",
        "    campaigns1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_products = Source{[Schema=\\\"sponsored_products\\\"]}[Data],\\n    campaigns1 = sponsored_products{[Name=\\\"campaigns\\\"]}[Data]\\nin\\n    campaigns1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SP purchased_product",
      "lineageTag": "151fdbe2-e2b1-4eda-8488-8a85c056ddf8",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_products = Source{[Schema=\"sponsored_products\"]}[Data],",
        "    purchased_product1 = sponsored_products{[Name=\"purchased_product\"]}[Data]",
        "in",
        "    purchased_product1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_products = Source{[Schema=\\\"sponsored_products\\\"]}[Data],\\n    purchased_product1 = sponsored_products{[Name=\\\"purchased_product\\\"]}[Data]\\nin\\n    purchased_product1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim Amazon Portfolios",
      "lineageTag": "de403d9e-fc80-44f1-8739-666f789fae72",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    public = Source{[Schema=\"public\"]}[Data],",
        "    amazon_advertising_portfolios1 = public{[Name=\"amazon_advertising_portfolios\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(amazon_advertising_portfolios1,{\"creation_date\", \"last_updated_date\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    public = Source{[Schema=\\\"public\\\"]}[Data],\\n    amazon_advertising_portfolios1 = public{[Name=\\\"amazon_advertising_portfolios\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(amazon_advertising_portfolios1,{\\\"creation_date\\\", \\\"last_updated_date\\\"})\\nin\\n    #\\\"Removed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim SB campaigns",
      "lineageTag": "0e8b54bd-65f8-4f6a-b86f-6735c452bd45",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_brands = Source{[Schema=\"sponsored_brands\"]}[Data],",
        "    campaigns1 = sponsored_brands{[Name=\"campaigns\"]}[Data]",
        "in",
        "    campaigns1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_brands = Source{[Schema=\\\"sponsored_brands\\\"]}[Data],\\n    campaigns1 = sponsored_brands{[Name=\\\"campaigns\\\"]}[Data]\\nin\\n    campaigns1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SB campaign",
      "lineageTag": "d5896f4f-1ff7-4e02-8ea5-a51ec12e340b",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_brands = Source{[Schema=\"sponsored_brands\"]}[Data],",
        "    campaign1 = sponsored_brands{[Name=\"campaign\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(campaign1,{{\"date\", type date}}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Changed Type\",{{\"date\", Order.Ascending}})",
        "in",
        "    #\"Sorted Rows\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_brands = Source{[Schema=\\\"sponsored_brands\\\"]}[Data],\\n    campaign1 = sponsored_brands{[Name=\\\"campaign\\\"]}[Data],\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(campaign1,{{\\\"date\\\", type date}}),\\n    #\\\"Sorted Rows\\\" = Table.Sort(#\\\"Changed Type\\\",{{\\\"date\\\", Order.Ascending}})\\nin\\n    #\\\"Sorted Rows\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SB campaign_placement",
      "lineageTag": "539bc14e-564e-4c94-9df8-26ea5f5430a0",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_brands = Source{[Schema=\"sponsored_brands\"]}[Data],",
        "    campaign_placement1 = sponsored_brands{[Name=\"campaign_placement\"]}[Data]",
        "in",
        "    campaign_placement1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_brands = Source{[Schema=\\\"sponsored_brands\\\"]}[Data],\\n    campaign_placement1 = sponsored_brands{[Name=\\\"campaign_placement\\\"]}[Data]\\nin\\n    campaign_placement1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SB purchased_product",
      "lineageTag": "62128cbd-c847-4fa0-820b-c3d417dcd743",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_brands = Source{[Schema=\"sponsored_brands\"]}[Data],",
        "    purchased_product1 = sponsored_brands{[Name=\"purchased_product\"]}[Data]",
        "in",
        "    purchased_product1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_brands = Source{[Schema=\\\"sponsored_brands\\\"]}[Data],\\n    purchased_product1 = sponsored_brands{[Name=\\\"purchased_product\\\"]}[Data]\\nin\\n    purchased_product1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SB search_term",
      "lineageTag": "b45ce5f8-8e9e-404b-adf7-d3c421afc82b",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_brands = Source{[Schema=\"sponsored_brands\"]}[Data],",
        "    search_term1 = sponsored_brands{[Name=\"search_term\"]}[Data]",
        "in",
        "    search_term1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_brands = Source{[Schema=\\\"sponsored_brands\\\"]}[Data],\\n    search_term1 = sponsored_brands{[Name=\\\"search_term\\\"]}[Data]\\nin\\n    search_term1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SB targeting",
      "lineageTag": "8dc4952f-758e-4418-9b1a-1f2a4095e49a",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_brands = Source{[Schema=\"sponsored_brands\"]}[Data],",
        "    targeting1 = sponsored_brands{[Name=\"targeting\"]}[Data]",
        "in",
        "    targeting1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_brands = Source{[Schema=\\\"sponsored_brands\\\"]}[Data],\\n    targeting1 = sponsored_brands{[Name=\\\"targeting\\\"]}[Data]\\nin\\n    targeting1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SB ad",
      "lineageTag": "14b8d6eb-b52e-4187-a7f4-a6c03eb98717",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_brands = Source{[Schema=\"sponsored_brands\"]}[Data],",
        "    ad1 = sponsored_brands{[Name=\"ad\"]}[Data]",
        "in",
        "    ad1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_brands = Source{[Schema=\\\"sponsored_brands\\\"]}[Data],\\n    ad1 = sponsored_brands{[Name=\\\"ad\\\"]}[Data]\\nin\\n    ad1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SB adgroup",
      "lineageTag": "e269acd5-67b0-4b54-8081-a83514e8c212",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_brands = Source{[Schema=\"sponsored_brands\"]}[Data],",
        "    adgroup1 = sponsored_brands{[Name=\"adgroup\"]}[Data]",
        "in",
        "    adgroup1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_brands = Source{[Schema=\\\"sponsored_brands\\\"]}[Data],\\n    adgroup1 = sponsored_brands{[Name=\\\"adgroup\\\"]}[Data]\\nin\\n    adgroup1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim SD campaigns",
      "lineageTag": "d975b062-35de-4044-89e8-e3e13505f68a",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]),",
        "    sponsored_display = Source{[Schema=\"sponsored_display\"]}[Data],",
        "    campaigns1 = sponsored_display{[Name=\"campaigns\"]}[Data]",
        "in",
        "    campaigns1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]),\\n    sponsored_display = Source{[Schema=\\\"sponsored_display\\\"]}[Data],\\n    campaigns1 = sponsored_display{[Name=\\\"campaigns\\\"]}[Data]\\nin\\n    campaigns1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim Customer Search Term",
      "lineageTag": "e64c8787-dba5-4a53-a457-d5fff51028c1",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [CommandTimeout=#duration(0, 0, 5, 0)]), \"SELECT DISTINCT LOWER(search_term) search_term FROM sponsored_products.search_term\", null, [EnableFolding=true])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [CommandTimeout=#duration(0, 0, 5, 0)]), \\\"SELECT DISTINCT LOWER(search_term) search_term FROM sponsored_products.search_term\\\", null, [EnableFolding=true])\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Exhange Rates 2024",
      "lineageTag": "bafd2ebc-45e5-4eed-83d0-51120b92846e",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Json.Document( Web.Contents(",
        "                                \"https://api.exchangerate.host/timeframe?access_key=bd552d946247b24b39d556976b8073fd&start_date=2024-01-01&end_date=\" ",
        "                                // & DateTime.ToText(DateTime.LocalNow(), \"yyyy-MM-dd\") & ",
        "                                & \"2024-12-30\" &",
        "                                \"&source=USD&currencies=CAD,GBP\") ",
        ")",
        "",
        "// Fetches YTD data. Maximum range is 365 days. ",
        "// Create new table for every new year",
        "",
        "",
        "// Fetches YTD data. Maximum range is 365 days.",
        "",
        "",
        "// Fetches YTD data. Maximum range is 365 days.",
        "",
        "",
        "// Fetches YTD data. Maximum t",
        ",",
        "    quotes = Source[quotes],",
        "    #\"Converted to Table\" = Record.ToTable(quotes),",
        "    #\"Expanded Value\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Value\", {\"USDCAD\", \"USDGBP\"}, {\"Value.USDCAD\", \"Value.USDGBP\"}),",
        "    #\"Inserted Rounding\" = Table.AddColumn(#\"Expanded Value\", \"USDCAD\", each Number.Round([Value.USDCAD], 2), type number),",
        "    #\"Inserted Rounding1\" = Table.AddColumn(#\"Inserted Rounding\", \"USDGBP\", each Number.Round([Value.USDGBP], 2), type number),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Inserted Rounding1\",{\"Value.USDCAD\", \"Value.USDGBP\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\",{{\"Name\", type date}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Name\", \"Date\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Exhange Rates 2023",
      "lineageTag": "44114a76-cad2-4a59-9f4b-264451ed623c",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Json.Document( Web.Contents(\"https://api.exchangerate.host/timeframe?access_key=bd552d946247b24b39d556976b8073fd&start_date=2023-01-01&end_date=2023-12-31&source=USD&currencies=CAD,GBP\") ),",
        "    quotes = Source[quotes],",
        "    #\"Converted to Table\" = Record.ToTable(quotes),",
        "    #\"Expanded Value\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Value\", {\"USDCAD\", \"USDGBP\"}, {\"Value.USDCAD\", \"Value.USDGBP\"}),",
        "    #\"Inserted Rounding\" = Table.AddColumn(#\"Expanded Value\", \"USDCAD\", each Number.Round([Value.USDCAD], 2), type number),",
        "    #\"Inserted Rounding1\" = Table.AddColumn(#\"Inserted Rounding\", \"USDGBP\", each Number.Round([Value.USDGBP], 2), type number),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Inserted Rounding1\",{\"Value.USDCAD\", \"Value.USDGBP\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\",{{\"Name\", type date}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Name\", \"Date\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Exhange Rates 2022",
      "lineageTag": "9200a9cd-da8a-4eb8-9b77-a3d28e1cefb5",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Json.Document( Web.Contents(\"https://api.exchangerate.host/timeframe?access_key=bd552d946247b24b39d556976b8073fd&start_date=2022-01-01&end_date=2022-12-31&source=USD&currencies=CAD,GBP\") ),",
        "    quotes = Source[quotes],",
        "    #\"Converted to Table\" = Record.ToTable(quotes),",
        "    #\"Expanded Value\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Value\", {\"USDCAD\", \"USDGBP\"}, {\"Value.USDCAD\", \"Value.USDGBP\"}),",
        "    #\"Inserted Rounding\" = Table.AddColumn(#\"Expanded Value\", \"USDCAD\", each Number.Round([Value.USDCAD], 2), type number),",
        "    #\"Inserted Rounding1\" = Table.AddColumn(#\"Inserted Rounding\", \"USDGBP\", each Number.Round([Value.USDGBP], 2), type number),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Inserted Rounding1\",{\"Value.USDCAD\", \"Value.USDGBP\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\",{{\"Name\", type date}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Name\", \"Date\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Exchange Rates",
      "lineageTag": "cdda6c75-25ed-4909-97e4-86560745ba59",
      "description": "Appends mutliple tables. Base currency is  USD.\nMaximum date range for each Exchange Rates YYYY table is 365 days. Therefore, new exchange rate table must be created every year. See https://exchangerate.host/documentation",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.Combine({#\"Exhange Rates 2024\", #\"Exhange Rates 2023\", #\"Exhange Rates 2022\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(Source, {\"Date\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Removed Duplicates\", \"USDUSD\", each 1),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Added Custom\",{\"Date\", \"USDUSD\", \"USDCAD\", \"USDGBP\"}),",
        "    #\"Unpivoted Only Selected Columns\" = Table.Unpivot(#\"Reordered Columns\", {\"USDUSD\", \"USDCAD\", \"USDGBP\"}, \"Currency Pair\", \"Exchange Rate\"),",
        "    #\"Split Column by Position\" = Table.SplitColumn(#\"Unpivoted Only Selected Columns\", \"Currency Pair\", Splitter.SplitTextByRepeatedLengths(3), {\"Base Currency\", \"Foreign Currency\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Split Column by Position\",{{\"Base Currency\", type text}, {\"Foreign Currency\", type text}}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Changed Type\",{{\"Date\", Order.Descending}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Sorted Rows\",{{\"Exchange Rate\", type number}})",
        "in",
        "    #\"Changed Type1\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Exchange Rates Average",
      "lineageTag": "d2aecf07-995a-419f-94fb-a05346abce18",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCg12UdKBkoZKsTowEWdHsIiesSmSoLtTAJA00DO3VIqNBQA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"Base Currency\" = _t, #\"Foreign Currency\" = _t, #\"Exchange Rate\" = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Base Currency\", type text}, {\"Foreign Currency\", type text}, {\"Exchange Rate\", type number}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45WCg12UdKBkoZKsTowEWdHsIiesSmSoLtTAJA00DO3VIqNBQA=\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\\\"Base Currency\\\" = _t, #\\\"Foreign Currency\\\" = _t, #\\\"Exchange Rate\\\" = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Base Currency\\\", type text}, {\\\"Foreign Currency\\\", type text}, {\\\"Exchange Rate\\\", type number}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "COGS (WW)",
      "lineageTag": "c9acc4dc-d449-49f8-895d-8527fc4d9f7b",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.Combine({#\"BB COGS (WW)\", #\"RY COGS (WW)\"})",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.Combine({#\\\"BB COGS (WW)\\\", #\\\"RY COGS (WW)\\\"})\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "BB COGS (WW)",
      "lineageTag": "bc198943-5745-4d69-8865-dc36c2ffd0b7",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = GoogleSheets.Contents(\"https://docs.google.com/spreadsheets/d/1-DKSsS0yA8tFDHBeOawVQp4nczCjmNPNJrsqyjgR4bc/edit?gid=1736232776#gid=1736232776\"),",
        "    #\"COGS (WW)_Table\" = Source{[name=\"COGS (WW)\",ItemKind=\"Table\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"COGS (WW)_Table\",{\"Column1\", \"Column2\"}),",
        "    #\"Removed Top Rows\" = Table.Skip(#\"Removed Columns\",4),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Removed Top Rows\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Blank Rows\", [PromoteAllScalars=true]),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\",{{\"Local\", \"US COGS\"}, {\"Local_1\", \"US FBA Fee\"}, {\"Storage\", \"US Storage\"}, {\"Returns\", \"US Returns\"}, {\"Local_2\", \"CA Local COGS\"}, {\"Local_3\", \"CA Local FBA Fee\"}, {\"Storage_4\", \"CA Local Storage\"}, {\"Returns_5\", \"CA Local Returns\"}, {\"NARF\", \"NARF COGS\"}, {\"NARF_9\", \"NARF FBA Fee\"}, {\"Storage_10\", \"NARF Storage\"}, {\"Returns_11\", \"NARF Returns\"}, {\"Local_16\", \"UK COGS\"}, {\"Local_17\", \"UK FBA Fee\"}, {\"Storage_18\", \"UK Storage\"}, {\"Returns_19\", \"UK Returns\"}}),",
        "    #\"Added Conditional Column\" = Table.AddColumn(#\"Renamed Columns\", \"CA COGS\", each if [Fulfilment Type] = \"LOCAL\" then [CA Local COGS] else if [Fulfilment Type] = \"NARF\" then [NARF COGS] else null),",
        "    #\"Added Conditional Column1\" = Table.AddColumn(#\"Added Conditional Column\", \"CA FBA Fee\", each if [Fulfilment Type] = \"LOCAL\" then [CA Local FBA Fee] else if [Fulfilment Type] = \"NARF\" then [NARF FBA Fee] else null),",
        "    #\"Added Conditional Column2\" = Table.AddColumn(#\"Added Conditional Column1\", \"CA Storage\", each if [Fulfilment Type] = \"LOCAL\" then [CA Local Storage] else if [Fulfilment Type] = \"NARF\" then [NARF Storage] else null),",
        "    #\"Added Conditional Column3\" = Table.AddColumn(#\"Added Conditional Column2\", \"CA Returns\", each if [Fulfilment Type] = \"LOCAL\" then [CA Local Returns] else if [Fulfilment Type] = \"NARF\" then [NARF Returns] else null),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Added Conditional Column3\",{\"Date Start\", \"Date End\", \"Parent Product\", \"Product Code\", \"SKU\", \"ASIN\", ",
        "                                                        \"US COGS\", \"US FBA Fee\", \"US Storage\", \"US Returns\", ",
        "                                                        \"CA COGS\", \"CA FBA Fee\", \"CA Storage\", \"CA Returns\", ",
        "                                                        \"UK COGS\", \"UK FBA Fee\", \"UK Storage\", \"UK Returns\"}),",
        "    #\"Unpivoted Columns1\" = Table.UnpivotOtherColumns(#\"Removed Other Columns\", {\"Date Start\", \"Date End\", \"Parent Product\", \"Product Code\", \"SKU\", \"ASIN\"}, \"Attribute\", \"Value\"),",
        "    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Unpivoted Columns1\", \"Attribute\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.None, false), {\"Marketplace\", \"Fee Name\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"Value\", Currency.Type}, {\"Date Start\", type date}, {\"Date End\", type date}}),",
        "    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Changed Type\", {\"Value\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Errors\", each [Value] <> null and [Value] <> \"\"),",
        "    #\"Pivoted Column\" = Table.Pivot(#\"Filtered Rows\", List.Distinct(#\"Filtered Rows\"[#\"Fee Name\"]), \"Fee Name\", \"Value\"),",
        "    #\"Added Conditional Column4\" = Table.AddColumn(#\"Pivoted Column\", \"Currency\", each if [Marketplace] = \"US\" then \"USD\" else if [Marketplace] = \"CA\" then \"CAD\" else if [Marketplace] = \"UK\" then \"GBP\" else null),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Added Conditional Column4\",{\"Date Start\", \"Date End\", \"Parent Product\", \"Product Code\", \"SKU\", \"ASIN\", \"Marketplace\", \"Currency\", \"COGS\", \"FBA Fee\", \"Storage\", \"Returns\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Reordered Columns\", \"tenant_id\", each 1)",
        "in",
        "    #\"Added Custom\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = GoogleSheets.Contents(\\\"https://docs.google.com/spreadsheets/d/1-DKSsS0yA8tFDHBeOawVQp4nczCjmNPNJrsqyjgR4bc/edit?gid=1736232776#gid=1736232776\\\"),\\n    #\\\"COGS (WW)_Table\\\" = Source{[name=\\\"COGS (WW)\\\",ItemKind=\\\"Table\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"COGS (WW)_Table\\\",{\\\"Column1\\\", \\\"Column2\\\"}),\\n    #\\\"Removed Top Rows\\\" = Table.Skip(#\\\"Removed Columns\\\",4),\\n    #\\\"Removed Blank Rows\\\" = Table.SelectRows(#\\\"Removed Top Rows\\\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\\\"\\\", null}))),\\n    #\\\"Promoted Headers\\\" = Table.PromoteHeaders(#\\\"Removed Blank Rows\\\", [PromoteAllScalars=true]),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Promoted Headers\\\",{{\\\"Local\\\", \\\"US COGS\\\"}, {\\\"Local_1\\\", \\\"US FBA Fee\\\"}, {\\\"Storage\\\", \\\"US Storage\\\"}, {\\\"Returns\\\", \\\"US Returns\\\"}, {\\\"Local_2\\\", \\\"CA Local COGS\\\"}, {\\\"Local_3\\\", \\\"CA Local FBA Fee\\\"}, {\\\"Storage_4\\\", \\\"CA Local Storage\\\"}, {\\\"Returns_5\\\", \\\"CA Local Returns\\\"}, {\\\"NARF\\\", \\\"NARF COGS\\\"}, {\\\"NARF_9\\\", \\\"NARF FBA Fee\\\"}, {\\\"Storage_10\\\", \\\"NARF Storage\\\"}, {\\\"Returns_11\\\", \\\"NARF Returns\\\"}, {\\\"Local_16\\\", \\\"UK COGS\\\"}, {\\\"Local_17\\\", \\\"UK FBA Fee\\\"}, {\\\"Storage_18\\\", \\\"UK Storage\\\"}, {\\\"Returns_19\\\", \\\"UK Returns\\\"}}),\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(#\\\"Renamed Columns\\\", \\\"CA COGS\\\", each if [Fulfilment Type] = \\\"LOCAL\\\" then [CA Local COGS] else if [Fulfilment Type] = \\\"NARF\\\" then [NARF COGS] else null),\\n    #\\\"Added Conditional Column1\\\" = Table.AddColumn(#\\\"Added Conditional Column\\\", \\\"CA FBA Fee\\\", each if [Fulfilment Type] = \\\"LOCAL\\\" then [CA Local FBA Fee] else if [Fulfilment Type] = \\\"NARF\\\" then [NARF FBA Fee] else null),\\n    #\\\"Added Conditional Column2\\\" = Table.AddColumn(#\\\"Added Conditional Column1\\\", \\\"CA Storage\\\", each if [Fulfilment Type] = \\\"LOCAL\\\" then [CA Local Storage] else if [Fulfilment Type] = \\\"NARF\\\" then [NARF Storage] else null),\\n    #\\\"Added Conditional Column3\\\" = Table.AddColumn(#\\\"Added Conditional Column2\\\", \\\"CA Returns\\\", each if [Fulfilment Type] = \\\"LOCAL\\\" then [CA Local Returns] else if [Fulfilment Type] = \\\"NARF\\\" then [NARF Returns] else null),\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(#\\\"Added Conditional Column3\\\",{\\\"Date Start\\\", \\\"Date End\\\", \\\"Parent Product\\\", \\\"Product Code\\\", \\\"SKU\\\", \\\"ASIN\\\", \\n                                                        \\\"US COGS\\\", \\\"US FBA Fee\\\", \\\"US Storage\\\", \\\"US Returns\\\", \\n                                                        \\\"CA COGS\\\", \\\"CA FBA Fee\\\", \\\"CA Storage\\\", \\\"CA Returns\\\", \\n                                                        \\\"UK COGS\\\", \\\"UK FBA Fee\\\", \\\"UK Storage\\\", \\\"UK Returns\\\"}),\\n    #\\\"Unpivoted Columns1\\\" = Table.UnpivotOtherColumns(#\\\"Removed Other Columns\\\", {\\\"Date Start\\\", \\\"Date End\\\", \\\"Parent Product\\\", \\\"Product Code\\\", \\\"SKU\\\", \\\"ASIN\\\"}, \\\"Attribute\\\", \\\"Value\\\"),\\n    #\\\"Split Column by Delimiter\\\" = Table.SplitColumn(#\\\"Unpivoted Columns1\\\", \\\"Attribute\\\", Splitter.SplitTextByEachDelimiter({\\\" \\\"}, QuoteStyle.None, false), {\\\"Marketplace\\\", \\\"Fee Name\\\"}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Split Column by Delimiter\\\",{{\\\"Value\\\", Currency.Type}, {\\\"Date Start\\\", type date}, {\\\"Date End\\\", type date}}),\\n    #\\\"Removed Errors\\\" = Table.RemoveRowsWithErrors(#\\\"Changed Type\\\", {\\\"Value\\\"}),\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Removed Errors\\\", each [Value] <> null and [Value] <> \\\"\\\"),\\n    #\\\"Pivoted Column\\\" = Table.Pivot(#\\\"Filtered Rows\\\", List.Distinct(#\\\"Filtered Rows\\\"[#\\\"Fee Name\\\"]), \\\"Fee Name\\\", \\\"Value\\\"),\\n    #\\\"Added Conditional Column4\\\" = Table.AddColumn(#\\\"Pivoted Column\\\", \\\"Currency\\\", each if [Marketplace] = \\\"US\\\" then \\\"USD\\\" else if [Marketplace] = \\\"CA\\\" then \\\"CAD\\\" else if [Marketplace] = \\\"UK\\\" then \\\"GBP\\\" else null),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(#\\\"Added Conditional Column4\\\",{\\\"Date Start\\\", \\\"Date End\\\", \\\"Parent Product\\\", \\\"Product Code\\\", \\\"SKU\\\", \\\"ASIN\\\", \\\"Marketplace\\\", \\\"Currency\\\", \\\"COGS\\\", \\\"FBA Fee\\\", \\\"Storage\\\", \\\"Returns\\\"}),\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Reordered Columns\\\", \\\"tenant_id\\\", each 1)\\nin\\n    #\\\"Added Custom\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "RY COGS (WW)",
      "lineageTag": "6bde120e-e9f8-4b75-9fef-d7ad30e81039",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = GoogleSheets.Contents(\"https://docs.google.com/spreadsheets/d/1-IEyNY2y5sjr-90TEhg1riOTPloRRwOa9-S22g766-o/edit?gid=305354249#gid=305354249\"),",
        "    #\"COGS (WW)_Table\" = Source{[name=\"COGS (WW)\",ItemKind=\"Table\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"COGS (WW)_Table\",{\"Column1\", \"Column2\"}),",
        "    #\"Removed Top Rows\" = Table.Skip(#\"Removed Columns\",4),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Removed Top Rows\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Blank Rows\", [PromoteAllScalars=true]),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\",{{\"L.COGS\", \"US COGS\"}, {\"Local\", \"US FBA Fee\"}, {\"Storage\", \"US Storage\"}, {\"Returns\", \"US Returns\"}, {\"Local_1\", \"CA Local COGS\"}, {\"Local_2\", \"CA Local FBA Fee\"}, {\"Storage_3\", \"CA Local Storage\"}, {\"Returns_4\", \"CA Local Returns\"}, {\"NARF\", \"NARF COGS\"}, {\"NARF_7\", \"NARF FBA Fee\"}, {\"Storage_8\", \"NARF Storage\"}, {\"Returns_9\", \"NARF Returns\"}, {\"Local_14\", \"UK COGS\"}, {\"Local_15\", \"UK FBA Fee\"}, {\"Storage_16\", \"UK Storage\"}, {\"Returns_17\", \"UK Returns\"}}),",
        "    #\"Added Conditional Column\" = Table.AddColumn(#\"Renamed Columns\", \"CA COGS\", each if [Fulfilment Type] = \"LOCAL\" then [CA Local COGS] else if [Fulfilment Type] = \"NARF\" then [NARF COGS] else null),",
        "    #\"Added Conditional Column1\" = Table.AddColumn(#\"Added Conditional Column\", \"CA FBA Fee\", each if [Fulfilment Type] = \"LOCAL\" then [CA Local FBA Fee] else if [Fulfilment Type] = \"NARF\" then [NARF FBA Fee] else null),",
        "    #\"Added Conditional Column2\" = Table.AddColumn(#\"Added Conditional Column1\", \"CA Storage\", each if [Fulfilment Type] = \"LOCAL\" then [CA Local Storage] else if [Fulfilment Type] = \"NARF\" then [NARF Storage] else null),",
        "    #\"Added Conditional Column3\" = Table.AddColumn(#\"Added Conditional Column2\", \"CA Returns\", each if [Fulfilment Type] = \"LOCAL\" then [CA Local Returns] else if [Fulfilment Type] = \"NARF\" then [NARF Returns] else null),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Added Conditional Column3\",{\"Date Start\", \"Date End\", \"Parent Product\", \"Product Code\", \"SKU\", \"ASIN\", ",
        "                                                        \"US COGS\", \"US FBA Fee\", \"US Storage\", \"US Returns\", ",
        "                                                        \"CA COGS\", \"CA FBA Fee\", \"CA Storage\", \"CA Returns\", ",
        "                                                        \"UK COGS\", \"UK FBA Fee\", \"UK Storage\", \"UK Returns\"}),",
        "    #\"Unpivoted Columns1\" = Table.UnpivotOtherColumns(#\"Removed Other Columns\", {\"Date Start\", \"Date End\", \"Parent Product\", \"Product Code\", \"SKU\", \"ASIN\"}, \"Attribute\", \"Value\"),",
        "    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Unpivoted Columns1\", \"Attribute\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.None, false), {\"Marketplace\", \"Fee Name\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"Value\", Currency.Type}, {\"Date Start\", type date}, {\"Date End\", type date}}),",
        "    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Changed Type\", {\"Value\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Errors\", each [Value] <> null and [Value] <> \"\"),",
        "    #\"Pivoted Column\" = Table.Pivot(#\"Filtered Rows\", List.Distinct(#\"Filtered Rows\"[#\"Fee Name\"]), \"Fee Name\", \"Value\"),",
        "    #\"Added Conditional Column4\" = Table.AddColumn(#\"Pivoted Column\", \"Currency\", each if [Marketplace] = \"US\" then \"USD\" else if [Marketplace] = \"CA\" then \"CAD\" else if [Marketplace] = \"UK\" then \"GBP\" else null),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Added Conditional Column4\",{\"Date Start\", \"Date End\", \"Parent Product\", \"Product Code\", \"SKU\", \"ASIN\", \"Marketplace\", \"Currency\", \"COGS\", \"FBA Fee\", \"Storage\", \"Returns\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Reordered Columns\", \"tenant_id\", each 2)",
        "in",
        "    #\"Added Custom\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = GoogleSheets.Contents(\\\"https://docs.google.com/spreadsheets/d/1-IEyNY2y5sjr-90TEhg1riOTPloRRwOa9-S22g766-o/edit?gid=305354249#gid=305354249\\\"),\\n    #\\\"COGS (WW)_Table\\\" = Source{[name=\\\"COGS (WW)\\\",ItemKind=\\\"Table\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"COGS (WW)_Table\\\",{\\\"Column1\\\", \\\"Column2\\\"}),\\n    #\\\"Removed Top Rows\\\" = Table.Skip(#\\\"Removed Columns\\\",4),\\n    #\\\"Removed Blank Rows\\\" = Table.SelectRows(#\\\"Removed Top Rows\\\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\\\"\\\", null}))),\\n    #\\\"Promoted Headers\\\" = Table.PromoteHeaders(#\\\"Removed Blank Rows\\\", [PromoteAllScalars=true]),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Promoted Headers\\\",{{\\\"L.COGS\\\", \\\"US COGS\\\"}, {\\\"Local\\\", \\\"US FBA Fee\\\"}, {\\\"Storage\\\", \\\"US Storage\\\"}, {\\\"Returns\\\", \\\"US Returns\\\"}, {\\\"Local_1\\\", \\\"CA Local COGS\\\"}, {\\\"Local_2\\\", \\\"CA Local FBA Fee\\\"}, {\\\"Storage_3\\\", \\\"CA Local Storage\\\"}, {\\\"Returns_4\\\", \\\"CA Local Returns\\\"}, {\\\"NARF\\\", \\\"NARF COGS\\\"}, {\\\"NARF_7\\\", \\\"NARF FBA Fee\\\"}, {\\\"Storage_8\\\", \\\"NARF Storage\\\"}, {\\\"Returns_9\\\", \\\"NARF Returns\\\"}, {\\\"Local_14\\\", \\\"UK COGS\\\"}, {\\\"Local_15\\\", \\\"UK FBA Fee\\\"}, {\\\"Storage_16\\\", \\\"UK Storage\\\"}, {\\\"Returns_17\\\", \\\"UK Returns\\\"}}),\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(#\\\"Renamed Columns\\\", \\\"CA COGS\\\", each if [Fulfilment Type] = \\\"LOCAL\\\" then [CA Local COGS] else if [Fulfilment Type] = \\\"NARF\\\" then [NARF COGS] else null),\\n    #\\\"Added Conditional Column1\\\" = Table.AddColumn(#\\\"Added Conditional Column\\\", \\\"CA FBA Fee\\\", each if [Fulfilment Type] = \\\"LOCAL\\\" then [CA Local FBA Fee] else if [Fulfilment Type] = \\\"NARF\\\" then [NARF FBA Fee] else null),\\n    #\\\"Added Conditional Column2\\\" = Table.AddColumn(#\\\"Added Conditional Column1\\\", \\\"CA Storage\\\", each if [Fulfilment Type] = \\\"LOCAL\\\" then [CA Local Storage] else if [Fulfilment Type] = \\\"NARF\\\" then [NARF Storage] else null),\\n    #\\\"Added Conditional Column3\\\" = Table.AddColumn(#\\\"Added Conditional Column2\\\", \\\"CA Returns\\\", each if [Fulfilment Type] = \\\"LOCAL\\\" then [CA Local Returns] else if [Fulfilment Type] = \\\"NARF\\\" then [NARF Returns] else null),\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(#\\\"Added Conditional Column3\\\",{\\\"Date Start\\\", \\\"Date End\\\", \\\"Parent Product\\\", \\\"Product Code\\\", \\\"SKU\\\", \\\"ASIN\\\", \\n                                                        \\\"US COGS\\\", \\\"US FBA Fee\\\", \\\"US Storage\\\", \\\"US Returns\\\", \\n                                                        \\\"CA COGS\\\", \\\"CA FBA Fee\\\", \\\"CA Storage\\\", \\\"CA Returns\\\", \\n                                                        \\\"UK COGS\\\", \\\"UK FBA Fee\\\", \\\"UK Storage\\\", \\\"UK Returns\\\"}),\\n    #\\\"Unpivoted Columns1\\\" = Table.UnpivotOtherColumns(#\\\"Removed Other Columns\\\", {\\\"Date Start\\\", \\\"Date End\\\", \\\"Parent Product\\\", \\\"Product Code\\\", \\\"SKU\\\", \\\"ASIN\\\"}, \\\"Attribute\\\", \\\"Value\\\"),\\n    #\\\"Split Column by Delimiter\\\" = Table.SplitColumn(#\\\"Unpivoted Columns1\\\", \\\"Attribute\\\", Splitter.SplitTextByEachDelimiter({\\\" \\\"}, QuoteStyle.None, false), {\\\"Marketplace\\\", \\\"Fee Name\\\"}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Split Column by Delimiter\\\",{{\\\"Value\\\", Currency.Type}, {\\\"Date Start\\\", type date}, {\\\"Date End\\\", type date}}),\\n    #\\\"Removed Errors\\\" = Table.RemoveRowsWithErrors(#\\\"Changed Type\\\", {\\\"Value\\\"}),\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Removed Errors\\\", each [Value] <> null and [Value] <> \\\"\\\"),\\n    #\\\"Pivoted Column\\\" = Table.Pivot(#\\\"Filtered Rows\\\", List.Distinct(#\\\"Filtered Rows\\\"[#\\\"Fee Name\\\"]), \\\"Fee Name\\\", \\\"Value\\\"),\\n    #\\\"Added Conditional Column4\\\" = Table.AddColumn(#\\\"Pivoted Column\\\", \\\"Currency\\\", each if [Marketplace] = \\\"US\\\" then \\\"USD\\\" else if [Marketplace] = \\\"CA\\\" then \\\"CAD\\\" else if [Marketplace] = \\\"UK\\\" then \\\"GBP\\\" else null),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(#\\\"Added Conditional Column4\\\",{\\\"Date Start\\\", \\\"Date End\\\", \\\"Parent Product\\\", \\\"Product Code\\\", \\\"SKU\\\", \\\"ASIN\\\", \\\"Marketplace\\\", \\\"Currency\\\", \\\"COGS\\\", \\\"FBA Fee\\\", \\\"Storage\\\", \\\"Returns\\\"}),\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Reordered Columns\\\", \\\"tenant_id\\\", each 2)\\nin\\n    #\\\"Added Custom\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SP Historical Campaign Cost",
      "lineageTag": "6f5aba7d-ef79-4752-82ac-e0071352b3c8",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [CommandTimeout=#duration(0, 0, 5, 0)]), \"-- API data source. (04-02-2023 to present)#(lf)select#(lf)    t1.date,#(lf)    t1.marketplace,#(lf)    t2.portfolio_id,#(lf)    t3.name portfolio_name,#(lf)    t1.campaign_budget_currency_code currency,#(lf)    t1.tenant_id,#(lf)    sum(t1.cost) total_cost,#(lf)    sum(t1.units_sold_clicks_7d) total_units_sold_clicks_7d,#(lf)    sum(t1.clicks) total_clicks,#(lf)    sum(t1.impressions) total_impressions,#(lf)    sum(t1.sales_7d) sales_7d#(lf)from sponsored_products.campaign t1#(lf)left join (select distinct on (campaign_id)#(lf)            campaign_id,#(lf)            portfolio_id#(lf)        from sponsored_products.targeting#(lf)        order by campaign_id, date desc) as t2#(lf)    on t1.campaign_id = t2.campaign_id#(lf)left join amazon_advertising_portfolios t3#(lf)    on t2.portfolio_id = t3.portfolio_id#(lf)group by t1.date, t1.marketplace, t2.portfolio_id, t3.name, t1.campaign_budget_currency_code, t1.tenant_id#(lf)having sum(t1.impressions) > 0#(lf)#(lf)UNION#(lf)#(lf)-- Advertising reports data source. (06-27-2022 to 2023-04-01)#(lf)select#(lf)    t1.date,#(lf)    t1.marketplace,#(lf)    t2.portfolio_id,#(lf)    t3.name portfolio_name,#(lf)    t1.currency,#(lf)    t1.tenant_id,#(lf)    sum(t1.spend) total_cost,#(lf)    sum(t1.\"\"7_day_total_orders\"\") total_units_sold_clicks_7d,#(lf)    sum(t1.clicks) total_clicks,#(lf)    sum(t1.impressions) total_impressions,#(lf)    sum(t1.\"\"7_day_total_sales\"\") sales_7d#(lf)from sponsored_products.campaign_console t1#(lf)left join amazon_advertising_portfolios t2#(lf)    on t1.portfolio_name = t2.name and t1.marketplace = t2.marketplace#(lf)left join amazon_advertising_portfolios t3#(lf)    on t2.portfolio_id = t3.portfolio_id#(lf)where t1.date < '04-02-2023'#(lf)group by t1.date, t1.marketplace, t2.portfolio_id, t3.name, t1.currency, t1.tenant_id#(lf)order by date asc, marketplace desc\", null, [EnableFolding=true]),",
        "    #\"Inserted Text Before Delimiter\" = Table.AddColumn(Source, \"Text Before Delimiter\", each Text.BeforeDelimiter([portfolio_name], \"-\", 1), type text),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Inserted Text Before Delimiter\",{{\"Text Before Delimiter\", \"parent_code\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [CommandTimeout=#duration(0, 0, 5, 0)]), \\\"-- API data source. (04-02-2023 to present)#(lf)select#(lf)    t1.date,#(lf)    t1.marketplace,#(lf)    t2.portfolio_id,#(lf)    t3.name portfolio_name,#(lf)    t1.campaign_budget_currency_code currency,#(lf)    t1.tenant_id,#(lf)    sum(t1.cost) total_cost,#(lf)    sum(t1.units_sold_clicks_7d) total_units_sold_clicks_7d,#(lf)    sum(t1.clicks) total_clicks,#(lf)    sum(t1.impressions) total_impressions,#(lf)    sum(t1.sales_7d) sales_7d#(lf)from sponsored_products.campaign t1#(lf)left join (select distinct on (campaign_id)#(lf)            campaign_id,#(lf)            portfolio_id#(lf)        from sponsored_products.targeting#(lf)        order by campaign_id, date desc) as t2#(lf)    on t1.campaign_id = t2.campaign_id#(lf)left join amazon_advertising_portfolios t3#(lf)    on t2.portfolio_id = t3.portfolio_id#(lf)group by t1.date, t1.marketplace, t2.portfolio_id, t3.name, t1.campaign_budget_currency_code, t1.tenant_id#(lf)having sum(t1.impressions) > 0#(lf)#(lf)UNION#(lf)#(lf)-- Advertising reports data source. (06-27-2022 to 2023-04-01)#(lf)select#(lf)    t1.date,#(lf)    t1.marketplace,#(lf)    t2.portfolio_id,#(lf)    t3.name portfolio_name,#(lf)    t1.currency,#(lf)    t1.tenant_id,#(lf)    sum(t1.spend) total_cost,#(lf)    sum(t1.\\\"\\\"7_day_total_orders\\\"\\\") total_units_sold_clicks_7d,#(lf)    sum(t1.clicks) total_clicks,#(lf)    sum(t1.impressions) total_impressions,#(lf)    sum(t1.\\\"\\\"7_day_total_sales\\\"\\\") sales_7d#(lf)from sponsored_products.campaign_console t1#(lf)left join amazon_advertising_portfolios t2#(lf)    on t1.portfolio_name = t2.name and t1.marketplace = t2.marketplace#(lf)left join amazon_advertising_portfolios t3#(lf)    on t2.portfolio_id = t3.portfolio_id#(lf)where t1.date < '04-02-2023'#(lf)group by t1.date, t1.marketplace, t2.portfolio_id, t3.name, t1.currency, t1.tenant_id#(lf)order by date asc, marketplace desc\\\", null, [EnableFolding=true]),\\n    #\\\"Inserted Text Before Delimiter\\\" = Table.AddColumn(Source, \\\"Text Before Delimiter\\\", each Text.BeforeDelimiter([portfolio_name], \\\"-\\\", 1), type text),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Inserted Text Before Delimiter\\\",{{\\\"Text Before Delimiter\\\", \\\"parent_code\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "SB Historical Campaign Cost",
      "lineageTag": "7076c196-757d-45b9-ae3a-a545a23f51f9",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [CommandTimeout=#duration(0, 0, 5, 0)]), \"-- API Data source v2 (2023-06-11 - present)#(lf)select t1.date, t1.marketplace, t2.portfolio_id, t1.currency, t1.tenant_id,#(lf)    sum(t1.cost) total_cost,#(lf)    sum(t1.attributed_units_ordered_new_to_brand_14d) attributed_units_ordered_new_to_brand_14d,#(lf)    sum(t1.clicks) total_clicks,#(lf)    sum(t1.impressions) total_impressions,#(lf)    sum(attributed_sales_14d) attributed_sales_14d#(lf)from sponsored_brands.campaign_v2 t1#(lf)left join sponsored_brands.campaigns t2 on t1.campaign_id = t2.campaign_id#(lf)where t1.campaign_status in ('enabled', 'paused')#(lf)group by t1.date, t2.portfolio_id, t1.marketplace, t1.currency, t1.tenant_id#(lf)#(lf)UNION#(lf)#(lf)-- Advertising reports from advertising console (2022-07-10 - 2023-06-10)#(lf)select t1.date, t1.marketplace, t2.portfolio_id, t1.currency, t1.tenant_id,#(lf)    sum(t1.spend) total_cost,#(lf)    sum(t1.\"\"14_day_total_units\"\") attributed_units_ordered_new_to_brand_14d,#(lf)    sum(t1.clicks) total_clicks,#(lf)    sum(t1.impressions) total_impressions,#(lf)    sum(t1.\"\"14_day_total_sales\"\") attributed_sales_14d#(lf)from sponsored_brands.campaign_console t1#(lf)left join amazon_advertising_portfolios t2#(lf)    on t1.portfolio_name = t2.name and t1.marketplace = t2.marketplace#(lf)where t1.date <= '2023-06-10'#(lf)group by t1.date, t2.portfolio_id, t1.marketplace, t1.currency, t1.tenant_id#(lf)order by date, marketplace, portfolio_id\", null, [EnableFolding=true])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [CommandTimeout=#duration(0, 0, 5, 0)]), \\\"-- API Data source v2 (2023-06-11 - present)#(lf)select t1.date, t1.marketplace, t2.portfolio_id, t1.currency, t1.tenant_id,#(lf)    sum(t1.cost) total_cost,#(lf)    sum(t1.attributed_units_ordered_new_to_brand_14d) attributed_units_ordered_new_to_brand_14d,#(lf)    sum(t1.clicks) total_clicks,#(lf)    sum(t1.impressions) total_impressions,#(lf)    sum(attributed_sales_14d) attributed_sales_14d#(lf)from sponsored_brands.campaign_v2 t1#(lf)left join sponsored_brands.campaigns t2 on t1.campaign_id = t2.campaign_id#(lf)where t1.campaign_status in ('enabled', 'paused')#(lf)group by t1.date, t2.portfolio_id, t1.marketplace, t1.currency, t1.tenant_id#(lf)#(lf)UNION#(lf)#(lf)-- Advertising reports from advertising console (2022-07-10 - 2023-06-10)#(lf)select t1.date, t1.marketplace, t2.portfolio_id, t1.currency, t1.tenant_id,#(lf)    sum(t1.spend) total_cost,#(lf)    sum(t1.\\\"\\\"14_day_total_units\\\"\\\") attributed_units_ordered_new_to_brand_14d,#(lf)    sum(t1.clicks) total_clicks,#(lf)    sum(t1.impressions) total_impressions,#(lf)    sum(t1.\\\"\\\"14_day_total_sales\\\"\\\") attributed_sales_14d#(lf)from sponsored_brands.campaign_console t1#(lf)left join amazon_advertising_portfolios t2#(lf)    on t1.portfolio_name = t2.name and t1.marketplace = t2.marketplace#(lf)where t1.date <= '2023-06-10'#(lf)group by t1.date, t2.portfolio_id, t1.marketplace, t1.currency, t1.tenant_id#(lf)order by date, marketplace, portfolio_id\\\", null, [EnableFolding=true])\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SD Historical Campaign Cost",
      "lineageTag": "69ad3f3a-a047-42af-9ab6-a66c2e89bab7",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [CommandTimeout=#duration(0, 0, 5, 0)]), \"-- API console (2023-06-11 - present)#(lf)select date,#(lf)       marketplace,#(lf)       campaign_id,#(lf)       currency,#(lf)       tenant_id,#(lf)       sum(cost) total_cost,#(lf)       sum(attributed_units_ordered_7d) as attributed_units_ordered_7d,#(lf)       sum(clicks) total_clicks,#(lf)       sum(impressions) total_impressions,#(lf)       sum(attributed_sales_14d) total_sales#(lf)from sponsored_display.campaign_v2#(lf)group by date, campaign_id, marketplace, currency, tenant_id#(lf)#(lf)UNION#(lf)#(lf)-- Advertising reports from console (2023-03-13 - 2023-06-10)#(lf)select date,#(lf)       t1.marketplace,#(lf)       t2.campaign_id,#(lf)       currency, #(lf)       t1.tenant_id,#(lf)       sum(spend) total_cost,#(lf)       sum(\"\"14_day_total_units\"\") attributed_units_ordered_7d,#(lf)       sum(clicks) total_clicks,#(lf)       sum(impressions) total_impressions,#(lf)       sum(\"\"14_day_total_sales\"\") total_sales#(lf)from sponsored_display.campaign_console t1#(lf)left join sponsored_display.campaigns as t2 on t1.campaign_name = t2.name#(lf)                                            and t1.marketplace = t2.marketplace#(lf)where date <= '2023-06-10'#(lf)group by date, t2.campaign_id, t1.marketplace, currency, t1.tenant_id#(lf)order by date, campaign_id, marketplace\", null, [EnableFolding=true])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [CommandTimeout=#duration(0, 0, 5, 0)]), \\\"-- API console (2023-06-11 - present)#(lf)select date,#(lf)       marketplace,#(lf)       campaign_id,#(lf)       currency,#(lf)       tenant_id,#(lf)       sum(cost) total_cost,#(lf)       sum(attributed_units_ordered_7d) as attributed_units_ordered_7d,#(lf)       sum(clicks) total_clicks,#(lf)       sum(impressions) total_impressions,#(lf)       sum(attributed_sales_14d) total_sales#(lf)from sponsored_display.campaign_v2#(lf)group by date, campaign_id, marketplace, currency, tenant_id#(lf)#(lf)UNION#(lf)#(lf)-- Advertising reports from console (2023-03-13 - 2023-06-10)#(lf)select date,#(lf)       t1.marketplace,#(lf)       t2.campaign_id,#(lf)       currency, #(lf)       t1.tenant_id,#(lf)       sum(spend) total_cost,#(lf)       sum(\\\"\\\"14_day_total_units\\\"\\\") attributed_units_ordered_7d,#(lf)       sum(clicks) total_clicks,#(lf)       sum(impressions) total_impressions,#(lf)       sum(\\\"\\\"14_day_total_sales\\\"\\\") total_sales#(lf)from sponsored_display.campaign_console t1#(lf)left join sponsored_display.campaigns as t2 on t1.campaign_name = t2.name#(lf)                                            and t1.marketplace = t2.marketplace#(lf)where date <= '2023-06-10'#(lf)group by date, t2.campaign_id, t1.marketplace, currency, t1.tenant_id#(lf)order by date, campaign_id, marketplace\\\", null, [EnableFolding=true])\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Dim Previous Date Interval",
      "lineageTag": "4df7690f-598e-48fd-8d58-ad7dcd4b6e50",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCk7MTVUISC3KzE9R0lEyUIrViVYKT03NBnIMwRzf/LySDCDPCMwLLE0sKkktAvKNwfzI1EQQxwTM8cvPSwVyTJViYwE=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"Date Interval\" = _t, Index = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date Interval\", type text}, {\"Index\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45WCk7MTVUISC3KzE9R0lEyUIrViVYKT03NBnIMwRzf/LySDCDPCMwLLE0sKkktAvKNwfzI1EQQxwTM8cvPSwVyTJViYwE=\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\\\"Date Interval\\\" = _t, Index = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Date Interval\\\", type text}, {\\\"Index\\\", Int64.Type}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SQP Rankings",
      "lineageTag": "1f2eafa0-2dd4-4d63-8788-a61dc369ef70",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\"), \"SELECT#(lf)    marketplace,#(lf)    search_query,#(lf)    SUM(purchases_brand_count) AS total_purchases_brand_count,#(lf)    RANK() OVER (PARTITION BY marketplace ORDER BY SUM(purchases_brand_count) DESC) AS rank#(lf)FROM brand_analytics.search_query_performance_brand_view#(lf)WHERE purchases_brand_count > 0#(lf)GROUP BY marketplace, search_query#(lf)ORDER BY marketplace DESC, total_purchases_brand_count DESC\", null, [EnableFolding=true]),",
        "    #\"Renamed Columns\" = Table.RenameColumns(Source,{{\"search_query\", \"top search query\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\"), \\\"SELECT#(lf)    marketplace,#(lf)    search_query,#(lf)    SUM(purchases_brand_count) AS total_purchases_brand_count,#(lf)    RANK() OVER (PARTITION BY marketplace ORDER BY SUM(purchases_brand_count) DESC) AS rank#(lf)FROM brand_analytics.search_query_performance_brand_view#(lf)WHERE purchases_brand_count > 0#(lf)GROUP BY marketplace, search_query#(lf)ORDER BY marketplace DESC, total_purchases_brand_count DESC\\\", null, [EnableFolding=true]),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(Source,{{\\\"search_query\\\", \\\"top search query\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "h10_keyword_tracker Search Volume",
      "lineageTag": "ff9dc987-a92c-4613-af13-53b363dece93",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]), \"SELECT#(lf)    date_added::DATE,#(lf)    marketplace_id,#(lf)    keyword,#(lf)    MAX(search_volume) search_volume#(lf)FROM rankings.h10_keyword_tracker#(lf)GROUP BY date_added::DATE, marketplace_id, keyword\", null, [EnableFolding=true])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]), \\\"SELECT#(lf)    date_added::DATE,#(lf)    marketplace_id,#(lf)    keyword,#(lf)    MAX(search_volume) search_volume#(lf)FROM rankings.h10_keyword_tracker#(lf)GROUP BY date_added::DATE, marketplace_id, keyword\\\", null, [EnableFolding=true])\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "SPk-sEX Campaign Placement",
      "lineageTag": "6c620f4e-c555-42bd-8be1-a8f6aa0ee068",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\", [HierarchicalNavigation=true]), \"SELECT t2.advertised_sku,#(lf)       t2.advertised_asin,#(lf)       substring(t1.campaign_name FROM '''(.*?)''') AS search_term,#(lf)       t1.* FROM sponsored_products.campaign_placement t1#(lf)            LEFT JOIN (#(lf)                SELECT DISTINCT ON (campaign_id, date) * FROM sponsored_products.advertised_product#(lf)                ORDER BY campaign_id, date, impressions DESC#(lf)            ) t2#(lf)                ON t1.campaign_id = t2.campaign_id AND t1.date = t2.date#(lf)WHERE t1.campaign_name LIKE '%SPk-sEX%'\", null, [EnableFolding=true]),",
        "    #\"Inserted Text Between Delimiters\" = Table.AddColumn(Source, \"Advertised Product\", each Text.BetweenDelimiters([advertised_sku], \"_\", \"3\", 2, 0), type text),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Inserted Text Between Delimiters\",{\"Advertised Product\", \"advertised_sku\", \"advertised_asin\", \"search_term\", \"date\", \"attributed_sales_same_sku_1d\", \"campaign_bidding_strategy\", \"units_sold_clicks_1d\", \"attributed_sales_same_sku_7d\", \"placement_classification\", \"attributed_sales_same_sku_14d\", \"sales_1d\", \"sales_7d\", \"campaign_rule_based_budget_amount\", \"attributed_sales_same_sku_30d\", \"kindle_edition_normalized_pages_royalties_14d\", \"purchases_same_sku_14d\", \"spend\", \"purchases_same_sku_1d\", \"campaign_budget_type\", \"units_sold_same_sku_1d\", \"campaign_status\", \"purchases_1d\", \"purchases_same_sku_7d\", \"units_sold_same_sku_7d\", \"campaign_budget_amount\", \"purchases_7d\", \"units_sold_same_sku_30d\", \"cost\", \"cost_per_click\", \"units_sold_clicks_14d\", \"campaign_id\", \"sales_14d\", \"click_through_rate\", \"sales_30d\", \"impressions\", \"kindle_edition_normalized_pages_read_14d\", \"campaign_applicable_budget_rule_name\", \"purchases_same_sku_30d\", \"purchases_14d\", \"units_sold_clicks_30d\", \"campaign_budget_currency_code\", \"purchases_30d\", \"campaign_applicable_budget_rule_id\", \"clicks\", \"campaign_name\", \"units_sold_same_sku_14d\", \"units_sold_clicks_7d\", \"created_at\", \"updated_at\", \"marketplace\"})",
        "in",
        "    #\"Reordered Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\", [HierarchicalNavigation=true]), \\\"SELECT t2.advertised_sku,#(lf)       t2.advertised_asin,#(lf)       substring(t1.campaign_name FROM '''(.*?)''') AS search_term,#(lf)       t1.* FROM sponsored_products.campaign_placement t1#(lf)            LEFT JOIN (#(lf)                SELECT DISTINCT ON (campaign_id, date) * FROM sponsored_products.advertised_product#(lf)                ORDER BY campaign_id, date, impressions DESC#(lf)            ) t2#(lf)                ON t1.campaign_id = t2.campaign_id AND t1.date = t2.date#(lf)WHERE t1.campaign_name LIKE '%SPk-sEX%'\\\", null, [EnableFolding=true]),\\n    #\\\"Inserted Text Between Delimiters\\\" = Table.AddColumn(Source, \\\"Advertised Product\\\", each Text.BetweenDelimiters([advertised_sku], \\\"_\\\", \\\"3\\\", 2, 0), type text),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(#\\\"Inserted Text Between Delimiters\\\",{\\\"Advertised Product\\\", \\\"advertised_sku\\\", \\\"advertised_asin\\\", \\\"search_term\\\", \\\"date\\\", \\\"attributed_sales_same_sku_1d\\\", \\\"campaign_bidding_strategy\\\", \\\"units_sold_clicks_1d\\\", \\\"attributed_sales_same_sku_7d\\\", \\\"placement_classification\\\", \\\"attributed_sales_same_sku_14d\\\", \\\"sales_1d\\\", \\\"sales_7d\\\", \\\"campaign_rule_based_budget_amount\\\", \\\"attributed_sales_same_sku_30d\\\", \\\"kindle_edition_normalized_pages_royalties_14d\\\", \\\"purchases_same_sku_14d\\\", \\\"spend\\\", \\\"purchases_same_sku_1d\\\", \\\"campaign_budget_type\\\", \\\"units_sold_same_sku_1d\\\", \\\"campaign_status\\\", \\\"purchases_1d\\\", \\\"purchases_same_sku_7d\\\", \\\"units_sold_same_sku_7d\\\", \\\"campaign_budget_amount\\\", \\\"purchases_7d\\\", \\\"units_sold_same_sku_30d\\\", \\\"cost\\\", \\\"cost_per_click\\\", \\\"units_sold_clicks_14d\\\", \\\"campaign_id\\\", \\\"sales_14d\\\", \\\"click_through_rate\\\", \\\"sales_30d\\\", \\\"impressions\\\", \\\"kindle_edition_normalized_pages_read_14d\\\", \\\"campaign_applicable_budget_rule_name\\\", \\\"purchases_same_sku_30d\\\", \\\"purchases_14d\\\", \\\"units_sold_clicks_30d\\\", \\\"campaign_budget_currency_code\\\", \\\"purchases_30d\\\", \\\"campaign_applicable_budget_rule_id\\\", \\\"clicks\\\", \\\"campaign_name\\\", \\\"units_sold_same_sku_14d\\\", \\\"units_sold_clicks_7d\\\", \\\"created_at\\\", \\\"updated_at\\\", \\\"marketplace\\\"})\\nin\\n    #\\\"Reordered Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "brand_analytics search_query_performance_weekly_asin",
      "lineageTag": "cff03e17-3a25-4111-8be1-641e8b4a1d3e",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = PostgreSQL.Database(\"edgepify.app\", \"ecommerce\"),",
        "    brand_analytics_search_query_performance_weekly_asin = Source{[Schema=\"brand_analytics\",Item=\"search_query_performance_weekly_asin\"]}[Data]",
        "in",
        "    brand_analytics_search_query_performance_weekly_asin"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\"),\\n    brand_analytics_search_query_performance_weekly_asin = Source{[Schema=\\\"brand_analytics\\\",Item=\\\"search_query_performance_weekly_asin\\\"]}[Data]\\nin\\n    brand_analytics_search_query_performance_weekly_asin\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "tenants",
      "lineageTag": "71a65d7a-f2e2-4f4a-969e-41145dc47e71",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Value.NativeQuery(PostgreSQL.Database(\"edgepify.app\", \"ecommerce\"), \"SELECT * FROM tenants\", null, [EnableFolding=true])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Value.NativeQuery(PostgreSQL.Database(\\\"edgepify.app\\\", \\\"ecommerce\\\"), \\\"SELECT * FROM tenants\\\", null, [EnableFolding=true])\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "Query Errors - 8/16/2024 3:59:24 AM",
      "id": "04afb695-35cd-4f87-95ed-09a99363b8ee",
      "description": "Errors in queries that were loaded on 8/16/2024 3:59:24 AM."
    }
  ],
  "culture": "en-US",
  "firewallEnabled": true
}